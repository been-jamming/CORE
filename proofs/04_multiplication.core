//CORE multiplication file
//06/01/2021
//Ben Jones

//I don't require that F is a function this time because the fact follows from the two rules used to define the product
//I will instead prove this is a function using the peano axioms which define this object
define is_multiplication_function(F): is_function(F) & *X*Y*T(X in NATURALS & Y in NATURALS & is_tuple(X, Y, T) -> ^Z(Z in NATURALS & are_related(T, Z, F))) & *X*Z(X in NATURALS & is_tuple(X, ZERO, Z) -> are_related(Z, ZERO, F)) & *X*Y*SY*T0*T1*P0*P1(X in NATURALS & Y in NATURALS & is_successor(Y, SY) & is_tuple(X, Y, T0) & are_related(T0, P0, F) & is_tuple(X, SY, T1) & are_related(T1, P1, F) -> is_natural_sum(P0, X, P1));

prove multiplication_function_exists: ^F(is_multiplication_function(F)){
	empty_in_naturals, closure_naturals = expand(NATURALS_inductive);

	define is_multiples_function(X, M): is_function(M) & is_domain(M, NATURALS) & is_codomain(M, NATURALS) & *N*S(is_natural_sum(X, N, S) -> are_related(N, S, M));
	define is_product(X, Y, Z): ^M^K(is_multiples_function(X, M) & is_recursively_defined_naturals(NATURALS, ZERO, M, K) & are_related(Y, Z, K));

	cross_product_C = cross_product(NATURALS, NATURALS)|C|;

	//Prove that multiples functions exist for all natural numbers N
	prove multiples_functions_exist: *N(N in NATURALS -> ^M(is_multiples_function(N, M))){
		given |N|;
		implies N_in_NATURALS;
		M_def = relation_existence_lemma[<X, Y: is_natural_sum(N, X, Y)>](NATURALS, NATURALS)|M|;
		choose M;

		prove M_is_function: *X*Y0*Y1(are_related(X, Y0, M) & are_related(X, Y1, M) -> equal_sets(Y0, Y1)){
			given |X, Y0, Y1|;
			implies X_related_Y0, X_related_Y1;
			X_in_NATURALS, Y0_in_NATURALS, N_X_sum_Y0 = M_def(X, Y0)(X_related_Y0);
			X_in_NATURALS, Y1_in_NATURALS, N_X_sum_Y1 = M_def(X, Y1)(X_related_Y1);
			return natural_sum_unique(N, X, Y0, Y1)(N_X_sum_Y0, N_X_sum_Y1);
		}
		M_is_function = #is_function(M)(M_is_function);

		prove M_domain_NATURALS: *X(X in NATURALS -> ^Y(are_related(X, Y, M))){
			given |X|;
			implies X_in_NATURALS;
			Y_in_NATURALS, N_X_sum_Y = natural_sum(N, X)(N_in_NATURALS, X_in_NATURALS)|Y|;
			choose Y;
			return M_def(X, Y)(X_in_NATURALS, Y_in_NATURALS, N_X_sum_Y);
		}
		M_domain_NATURALS = #is_domain(M, NATURALS)(M_domain_NATURALS);

		prove M_codomain_NATURALS: *X*Y(are_related(X, Y, M) -> Y in NATURALS){
			given |X, Y|;
			implies X_related_Y;
			X_in_NATURALS, Y_in_NATURALS, N_X_sum_Y = M_def(X, Y)(X_related_Y);
			return Y_in_NATURALS;
		}
		M_codomain_NATURALS = #is_codomain(M, NATURALS)(M_codomain_NATURALS);

		prove M_property: *J*S(is_natural_sum(N, J, S) -> are_related(J, S, M)){
			given |J, S|;
			implies N_J_sum_S;
			N_in_NATURALS, J_in_NATURALS, tuple_exists = expand(N_J_sum_S);
			S_in_NATURALS = natural_sum_is_natural(N, J, S)(N_J_sum_S);
			return M_def(J, S)(J_in_NATURALS, S_in_NATURALS, N_J_sum_S);
		}

		return #is_multiples_function(N, M)(M_is_function, M_domain_NATURALS, M_codomain_NATURALS, M_property);
	}

	//Prove that "multiples functions" are unique
	prove multiples_functions_unique: *N(N in NATURALS -> *K*L(is_multiples_function(N, K) & is_multiples_function(N, L) -> equal_relations(NATURALS, NATURALS, K, L))){
		given |N|;
		implies N_in_NATURALS;
		given |K, L|;
		implies K_multiples_function, L_multiples_function;
		function_K, K_domain_NATURALS, K_codomain_NATURALS, K_recursion = expand(K_multiples_function);
		function_L, L_domain_NATURALS, L_codomain_NATURALS, L_recursion = expand(L_multiples_function);

		prove K_equal_L: *X*Y(X in NATURALS & Y in NATURALS -> (are_related(X, Y, K) <-> are_related(X, Y, L))){
			given |X, Y|;
			implies X_in_NATURALS, Y_in_NATURALS;
			OTHER_Y_in_NATURALS, N_X_sum_OTHER_Y = natural_sum(N, X)(N_in_NATURALS, X_in_NATURALS)|OTHER_Y|;
			prove lemma0: are_related(X, Y, K) -> are_related(X, Y, L){
				implies X_related_Y_K;
				X_related_OTHER_Y_K = K_recursion(X, OTHER_Y)(N_X_sum_OTHER_Y);
				equal_Y = expand(function_K)(X, Y, OTHER_Y)(X_related_Y_K, X_related_OTHER_Y_K);
				N_X_sum_Y = equality_consistency[<Q: is_natural_sum(N, X, Q)>](Y, OTHER_Y)(equal_Y)(N_X_sum_OTHER_Y);
				return L_recursion(X, Y)(N_X_sum_Y);
			}
			prove lemma1: are_related(X, Y, L) -> are_related(X, Y, K){
				implies X_related_Y_L;
				X_related_OTHER_Y_L = L_recursion(X, OTHER_Y)(N_X_sum_OTHER_Y);
				equal_Y = expand(function_L)(X, Y, OTHER_Y)(X_related_Y_L, X_related_OTHER_Y_L);
				N_X_sum_Y = equality_consistency[<Q: is_natural_sum(N, X, Q)>](Y, OTHER_Y)(equal_Y)(N_X_sum_OTHER_Y);
				return K_recursion(X, Y)(N_X_sum_Y);
			}
			return iff(lemma0, lemma1);
		}

		return #equal_relations(NATURALS, NATURALS, K, L)(K_equal_L);
	}

	//Prove that the product of two natural numbers always exists
	prove product: *X*Y(X in NATURALS & Y in NATURALS -> ^Z(Z in NATURALS & is_product(X, Y, Z))){
		given |X, Y|;
		implies X_in_NATURALS, Y_in_NATURALS;
		M_multiples_function = multiples_functions_exist(X)(X_in_NATURALS)|M|;
		M_function, M_domain_NATURALS, M_codomain_NATURALS, M_property = expand(M_multiples_function);
		K_recursively_defined = naturals_recursion_theorem(NATURALS, ZERO, M)(zero_is_natural, M_function, M_domain_NATURALS, M_codomain_NATURALS)|K|;
		K_function, K_domain_NATURALS, K_codomain_NATURALS, ZERO_related_ZERO, K_recursion = expand(K_recursively_defined);
		Y_related_Z = expand(K_domain_NATURALS)(Y)(Y_in_NATURALS)|Z|;
		choose Z;
		Z_in_NATURALS = expand(K_codomain_NATURALS)(Y, Z)(Y_related_Z);
		prove X_Y_product_Z: ^M^K(is_multiples_function(X, M) & is_recursively_defined_naturals(NATURALS, ZERO, M, K) & are_related(Y, Z, K)){
			choose M, K;
			return M_multiples_function, K_recursively_defined, Y_related_Z;
		}
		return Z_in_NATURALS, #is_product(X, Y, Z)(X_Y_product_Z);
	}

	//Prove that the product of two natural numbers is unique
	prove product_unique: *X*Y*Z0*Z1(X in NATURALS & Y in NATURALS & is_product(X, Y, Z0) & is_product(X, Y, Z1) -> equal_sets(Z0, Z1)){
		given |X, Y, Z0, Z1|;
		implies X_in_NATURALS, Y_in_NATURALS, product_Z0, product_Z1;
		M0_multiples_function, K0_recursively_defined, Y_related_Z0_K0 = expand(product_Z0)|M0, K0|;
		M1_multiples_function, K1_recursively_defined, Y_related_Z1_K1 = expand(product_Z1)|M1, K1|;
		M1_function, M1_domain_NATURALS, M1_codomain_NATURALS, M1_recursion = expand(M1_multiples_function);
		function_K0, K0_domain_NATURALS, K0_codomain_NATURALS, ZERO_related_ZERO_K0, K0_recursion = expand(K0_recursively_defined);
		function_K1, K1_domain_NATURALS, K1_codomain_NATURALS, ZERO_related_ZERO_K1, K1_recursion = expand(K1_recursively_defined);
		M0_equal_M1 = multiples_functions_unique(X)(X_in_NATURALS)(M0, M1)(M0_multiples_function, M1_multiples_function);
		K0_recursively_defined_other = naturals_recursively_defined_replace(NATURALS, ZERO, M0, M1, K0)(M0_equal_M1, K0_recursively_defined);
		K0_equal_K1 = naturals_recursively_defined_unique(NATURALS, ZERO, M1)(zero_is_natural, M1_function, M1_domain_NATURALS, M1_codomain_NATURALS)(K0, K1)(K0_recursively_defined_other, K1_recursively_defined);

		Z0_in_NATURALS = expand(K0_codomain_NATURALS)(Y, Z0)(Y_related_Z0_K0);
		Y_related_Z0_K1 = expand(K0_equal_K1)(Y, Z0)(Y_in_NATURALS, Z0_in_NATURALS)(Y_related_Z0_K0);
		return expand(function_K1)(Y, Z0, Z1)(Y_related_Z0_K1, Y_related_Z1_K1);
	}

	//Prove that X*0 = 0 for all natural numbers X
	prove product_zero_identity: *X(X in NATURALS -> is_product(X, ZERO, ZERO)){
		given |X|;
		implies X_in_NATURALS;
		prove X_product_ZERO: ^M^K(is_multiples_function(X, M) & is_recursively_defined_naturals(NATURALS, ZERO, M, K) & are_related(ZERO, ZERO, K)){
			M_multiples_function = multiples_functions_exist(X)(X_in_NATURALS)|M|;
			M_function, M_domain_NATURALS, M_codomain_NATURALS, M_property = expand(M_multiples_function);
			K_recursively_defined = naturals_recursion_theorem(NATURALS, ZERO, M)(zero_is_natural, M_function, M_domain_NATURALS, M_codomain_NATURALS)|K|;
			choose M, K;
			K_function, K_domain_NATURALS, K_codomain_NATURALS, ZERO_related_ZERO_K, K_recursion = expand(K_recursively_defined);
			return M_multiples_function, K_recursively_defined, ZERO_related_ZERO_K;
		}
		return #is_product(X, ZERO, ZERO)(X_product_ZERO);
	}

	//Prove the product recursion formula
	prove product_recursion: *X*Y*SY*P0*P1(X in NATURALS & Y in NATURALS & is_successor(Y, SY) & is_product(X, Y, P0) & is_product(X, SY, P1) -> is_natural_sum(P0, X, P1)){
		given |X, Y, SY, P0, P1|;
		implies X_in_NATURALS, Y_in_NATURALS, successor_SY, X_product_Y_P0, X_product_SY_P1;
		M_multiples_X, K_recursively_defined, Y_related_P0_K = expand(X_product_Y_P0)|M, K|;
		K_function, K_domain_NATURALS, K_codomain_NATURALS, K_ZERO_identity, K_recursion = expand(K_recursively_defined);
		M_is_function, M_domain_NATURALS, M_codomain_NATURALS, M_def = expand(M_multiples_X);
		M_OTHER_multiples_X, K_OTHER_recursively_defined, SY_related_P1_K_OTHER = expand(X_product_SY_P1)|M_OTHER, K_OTHER|;
		K_OTHER_function, K_OTHER_domain_NATURALS, K_OTHER_codomain_NATURALS, K_OTHER_def = expand(K_OTHER_recursively_defined);
		M_equal = multiples_functions_unique(X)(X_in_NATURALS)(M_OTHER, M)(M_OTHER_multiples_X, M_multiples_X);
		K_OTHER_recursively_defined = naturals_recursively_defined_replace(NATURALS, ZERO, M_OTHER, M, K_OTHER)(M_equal, K_OTHER_recursively_defined);
		K_equal = naturals_recursively_defined_unique(NATURALS, ZERO, M)(zero_is_natural, M_is_function, M_domain_NATURALS, M_codomain_NATURALS)(K, K_OTHER)(K_recursively_defined, K_OTHER_recursively_defined);

		SY_in_NATURALS = closure_naturals(Y, SY)(Y_in_NATURALS, successor_SY);
		P0_in_NATURALS = expand(K_codomain_NATURALS)(Y, P0)(Y_related_P0_K);
		P1_in_NATURALS = expand(K_OTHER_codomain_NATURALS)(SY, P1)(SY_related_P1_K_OTHER);
		SY_related_P1_K = expand(K_equal)(SY, P1)(SY_in_NATURALS, P1_in_NATURALS)(SY_related_P1_K_OTHER);
		
		P0_related_P1_M = K_recursion(Y, SY, P0, P1)(Y_in_NATURALS, successor_SY, Y_related_P0_K, SY_related_P1_K);
		OTHER_P1_in_NATURALS, X_sum_P0_OTHER_P1 = natural_sum(X, P0)(X_in_NATURALS, P0_in_NATURALS)|OTHER_P1|;
		P0_related_OTHER_P1_M = M_def(P0, OTHER_P1)(X_sum_P0_OTHER_P1);
		equal_P1 = expand(M_is_function)(P0, P1, OTHER_P1)(P0_related_P1_M, P0_related_OTHER_P1_M);
		X_sum_P0_P1 = equality_consistency[<Q: is_natural_sum(X, P0, Q)>](P1, OTHER_P1)(equal_P1)(X_sum_P0_OTHER_P1);
		return natural_sum_commutative(X, P0, P1)(X_sum_P0_P1);
	}

	PRODUCT_FUNCTION_definition = relation_existence_lemma[<T, Z: *X*Y(is_tuple(X, Y, T) -> is_product(X, Y, Z))>](C, NATURALS)|PRODUCT_FUNCTION|;
	choose PRODUCT_FUNCTION;

	prove product_function: *T*Z0*Z1(are_related(T, Z0, PRODUCT_FUNCTION) & are_related(T, Z1, PRODUCT_FUNCTION) -> equal_sets(Z0, Z1)){
		given |T, Z0, Z1|;
		implies T_related_Z0, T_related_Z1;
		T_in_C, Z0_in_NATURALS, Z0_condition = PRODUCT_FUNCTION_definition(T, Z0)(T_related_Z0);
		T_in_C, Z1_in_NATURALS, Z1_condition = PRODUCT_FUNCTION_definition(T, Z1)(T_related_Z1);
		X_in_NATURALS, Y_in_NATURALS, tuple_T = expand(cross_product_C)(T)(T_in_C)|X, Y|;
		X_product_Y_Z0 = Z0_condition(X, Y)(tuple_T);
		X_product_Y_Z1 = Z1_condition(X, Y)(tuple_T);
		return product_unique(X, Y, Z0, Z1)(X_in_NATURALS, Y_in_NATURALS, X_product_Y_Z0, X_product_Y_Z1);
	}

	product_function = #is_function(PRODUCT_FUNCTION)(product_function);

	prove product_exists: *X*Y*T(X in NATURALS & Y in NATURALS & is_tuple(X, Y, T) -> ^Z(Z in NATURALS & are_related(T, Z, PRODUCT_FUNCTION))){
		given |X, Y, T|;
		implies X_in_NATURALS, Y_in_NATURALS, tuple_T;
		prove T_in_C: ^X^Y(X in NATURALS & Y in NATURALS & is_tuple(X, Y, T)){
			choose X, Y;
			return X_in_NATURALS, Y_in_NATURALS, tuple_T;
		}
		T_in_C = expand(cross_product_C)(T)(T_in_C);
		Z_in_NATURALS, product_Z = product(X, Y)(X_in_NATURALS, Y_in_NATURALS)|Z|;
		choose Z;
		prove product_condition: *OTHER_X*OTHER_Y(is_tuple(OTHER_X, OTHER_Y, T) -> is_product(OTHER_X, OTHER_Y, Z)){
			given |OTHER_X, OTHER_Y|;
			implies other_tuple_T;
			equal_X, equal_Y = tuple_equal_condition(X, Y, OTHER_X, OTHER_Y, T, T)(tuple_T, other_tuple_T, equal_sets_reflexive(T));
			product_Z = equality_consistency[<Q: is_product(Q, Y, Z)>](X, OTHER_X)(equal_X)(product_Z);
			return equality_consistency[<Q: is_product(OTHER_X, Q, Z)>](Y, OTHER_Y)(equal_Y)(product_Z);
		}
		return Z_in_NATURALS, PRODUCT_FUNCTION_definition(T, Z)(T_in_C, Z_in_NATURALS, product_condition);
	}

	prove zero_identity: *X*Z(X in NATURALS & is_tuple(X, ZERO, Z) -> are_related(Z, ZERO, PRODUCT_FUNCTION)){
		given |X, Z|;
		implies X_in_NATURALS, tuple_Z;
		product_zero = product_zero_identity(X)(X_in_NATURALS);
		prove Z_in_C: ^X^ZERO(X in NATURALS & ZERO in NATURALS & is_tuple(X, ZERO, Z)){
			choose X, ZERO;
			return X_in_NATURALS, zero_is_natural, tuple_Z;
		}
		Z_in_C = expand(cross_product_C)(Z)(Z_in_C);
		prove condition: *A*B(is_tuple(A, B, Z) -> is_product(A, B, ZERO)){
			given |OTHER_X, OTHER_ZERO|;
			implies other_tuple_Z;
			equal_X, equal_ZERO = tuple_equal_condition(X, ZERO, OTHER_X, OTHER_ZERO, Z, Z)(tuple_Z, other_tuple_Z, equal_sets_reflexive(Z));
			product_zero = equality_consistency[<Q: is_product(Q, ZERO, ZERO)>](X, OTHER_X)(equal_X)(product_zero);
			return equality_consistency[<Q: is_product(OTHER_X, Q, ZERO)>](ZERO, OTHER_ZERO)(equal_ZERO)(product_zero);
		}
		return PRODUCT_FUNCTION_definition(Z, ZERO)(Z_in_C, zero_is_natural, condition);
	}

	prove recursion_identity: *X*Y*SY*T0*T1*P0*P1(X in NATURALS & Y in NATURALS & is_successor(Y, SY) & is_tuple(X, Y, T0) & are_related(T0, P0, PRODUCT_FUNCTION) & is_tuple(X, SY, T1) & are_related(T1, P1, PRODUCT_FUNCTION) -> is_natural_sum(P0, X, P1)){
		given |X, Y, SY, T0, T1, P0, P1|;
		implies X_in_NATURALS, Y_in_NATURALS, successor_SY, tuple_T0, T0_related_P0_PRODUCT, tuple_T1, T1_related_P1_PRODUCT;
		T0_in_C, P0_in_NATURALS, P0_condition = PRODUCT_FUNCTION_definition(T0, P0)(T0_related_P0_PRODUCT);
		T1_in_C, P1_in_NATURALS, P1_condition = PRODUCT_FUNCTION_definition(T1, P1)(T1_related_P1_PRODUCT);
		X_product_Y_P0 = P0_condition(X, Y)(tuple_T0);
		X_product_SY_P1 = P1_condition(X, SY)(tuple_T1);
		return product_recursion(X, Y, SY, P0, P1)(X_in_NATURALS, Y_in_NATURALS, successor_SY, X_product_Y_P0, X_product_SY_P1);
	}

	return #is_multiplication_function(PRODUCT_FUNCTION)(product_function, product_exists, zero_identity, recursion_identity);
}

naturals_product_function_definition = multiplication_function_exists|NATURALS_MULTIPLICATION_FUNCTION|;

//Define the product of two natural numbers using NATURALS_MULTIPLICATION_FUNCTION
define is_natural_product(X, Y, Z): X in NATURALS & Y in NATURALS & *T(is_tuple(X, Y, T) -> are_related(T, Z, NATURALS_MULTIPLICATION_FUNCTION));

//Proving (easily) that X*0 = 0 for all natural numbers X
prove natural_product_zero_identity: *X(X in NATURALS -> is_natural_product(X, ZERO, ZERO)){
	is_function, product_exists, zero_identity, product_recursion = expand(naturals_product_function_definition);

	given |X|;
	implies X_in_NATURALS;
	prove X_product_ZERO_ZERO: *T(is_tuple(X, ZERO, T) -> are_related(T, ZERO, NATURALS_MULTIPLICATION_FUNCTION)){
		given |T|;
		implies tuple_T;
		return zero_identity(X, T)(X_in_NATURALS, tuple_T);
	}

	return #is_natural_product(X, ZERO, ZERO)(X_in_NATURALS, zero_is_natural, X_product_ZERO_ZERO);
}

//Proving (easily) that X*(Y + 1) = X*Y + X for natural numbers X and Y
prove natural_product_successor_recursion: *X*Y*SY*P0*P1(is_successor(Y, SY) & is_natural_product(X, Y, P0) & is_natural_product(X, SY, P1) -> is_natural_sum(P0, X, P1)){
	is_function, product_exists, zero_identity, product_recursion = expand(naturals_product_function_definition);

	given |X, Y, SY, P0, P1|;
	implies successor_SY, product_P0, product_P1;
	X_in_NATURALS, Y_in_NATURALS, tuples_P0 = expand(product_P0);
	X_in_NATURALS, SY_in_NATURALS, tuples_P1 = expand(product_P1);
	tuple_T0 = tuple(X, Y)|T0|;
	tuple_T1 = tuple(X, SY)|T1|;
	T0_related_P0 = tuples_P0(T0)(tuple_T0);
	T1_related_P1 = tuples_P1(T1)(tuple_T1);

	return product_recursion(X, Y, SY, T0, T1, P0, P1)(X_in_NATURALS, Y_in_NATURALS, successor_SY, tuple_T0, T0_related_P0, tuple_T1, T1_related_P1);
}

//Proving that the product of two natural numbers always exists.
prove natural_product: *X*Y(X in NATURALS & Y in NATURALS -> ^Z(Z in NATURALS & is_natural_product(X, Y, Z))){
	is_function, product_exists, zero_identity, product_recursion = expand(naturals_product_function_definition);

	given |X, Y|;
	implies X_in_NATURALS, Y_in_NATURALS;
	tuple_T = tuple(X, Y)|T|;
	Z_in_NATURALS, Z_related_T = product_exists(X, Y, T)(X_in_NATURALS, Y_in_NATURALS, tuple_T)|Z|;
	choose Z;
	prove product_Z: *OTHER_T(is_tuple(X, Y, OTHER_T) -> are_related(OTHER_T, Z, NATURALS_MULTIPLICATION_FUNCTION)){
		given |OTHER_T|;
		implies tuple_OTHER_T;
		equal_T = tuple_unique(X, Y, T, OTHER_T)(tuple_T, tuple_OTHER_T);
		return equality_consistency[<Q: are_related(Q, Z, NATURALS_MULTIPLICATION_FUNCTION)>](T, OTHER_T)(equal_T)(Z_related_T);
	}

	return Z_in_NATURALS, #is_natural_product(X, Y, Z)(X_in_NATURALS, Y_in_NATURALS, product_Z);
}

//Proving that the product between two natural numbers is unique. After this, we won't need NATURALS_MULTIPLICATION_FUNCTION anymore.
prove natural_product_unique: *X*Y*Z0*Z1(is_natural_product(X, Y, Z0) & is_natural_product(X, Y, Z1) -> equal_sets(Z0, Z1)){
	is_function, zero_identity, product_recursion = expand(naturals_product_function_definition);

	given |X, Y, Z0, Z1|;
	implies product_Z0, product_Z1;
	X_in_NATURALS, Y_in_NATURALS, tuple_condition0 = expand(product_Z0);
	X_in_NATURALS, Y_in_NATURALS, tuple_condition1 = expand(product_Z1);
	tuple_T = tuple(X, Y)|T|;
	T_related_Z0 = tuple_condition0(T)(tuple_T);
	T_related_Z1 = tuple_condition1(T)(tuple_T);
	return expand(is_function)(T, Z0, Z1)(T_related_Z0, T_related_Z1);
}

//Proving that 2*2 = 4
prove TWO_times_TWO_is_FOUR: is_natural_product(TWO, TWO, FOUR){
	TWO_times_ZERO_is_ZERO = natural_product_zero_identity(TWO)(two_is_natural);
	OTHER_TWO_in_NATURALS, product_OTHER_TWO = natural_product(TWO, ONE)(two_is_natural, one_is_natural)|OTHER_TWO|;
	sum_OTHER_TWO = natural_product_successor_recursion(TWO, ZERO, ONE, ZERO, OTHER_TWO)(one_definition, TWO_times_ZERO_is_ZERO, product_OTHER_TWO);
	equal_TWO = natural_sum_unique(ZERO, TWO, TWO, OTHER_TWO)(natural_sum_zero_identity(TWO)(two_is_natural), sum_OTHER_TWO);

	TWO_times_ONE_is_TWO = equality_consistency[<Q: is_natural_product(TWO, ONE, Q)>](TWO, OTHER_TWO)(equal_TWO)(product_OTHER_TWO);
	OTHER_FOUR_in_NATURALS, product_OTHER_FOUR = natural_product(TWO, TWO)(two_is_natural, two_is_natural)|OTHER_FOUR|;
	sum_OTHER_FOUR = natural_product_successor_recursion(TWO, ONE, TWO, TWO, OTHER_FOUR)(two_definition, TWO_times_ONE_is_TWO, product_OTHER_FOUR);
	equal_FOUR = natural_sum_unique(TWO, TWO, FOUR, OTHER_FOUR)(TWO_plus_TWO_is_FOUR, sum_OTHER_FOUR);

	return equality_consistency[<Q: is_natural_product(TWO, TWO, Q)>](FOUR, OTHER_FOUR)(equal_FOUR)(product_OTHER_FOUR);
}

//Prove the other direction of the product zero identity
prove natural_product_zero_identity2: *X(X in NATURALS -> is_natural_product(ZERO, X, ZERO)){
	empty_in_naturals, closure_naturals = expand(NATURALS_inductive);

	//We induct on X
	R_def = axiom_specify[<X: is_natural_product(ZERO, X, ZERO)>](NATURALS)|R|;

	ZERO_in_R = R_def(ZERO)(zero_is_natural, natural_product_zero_identity(ZERO)(zero_is_natural));

	prove closure_R: *N*N1(N in R & is_successor(N, N1) -> N1 in R){
		given |N, N1|;
		implies N_in_R, successor_N1;
		N_in_NATURALS, N_cond = R_def(N)(N_in_R);
		N1_in_NATURALS = closure_naturals(N, N1)(N_in_NATURALS, successor_N1);

		prove N1_cond: is_natural_product(ZERO, N1, ZERO){
			OTHER_ZERO_in_NATURALS, product_OTHER_ZERO = natural_product(ZERO, N1)(zero_is_natural, N1_in_NATURALS)|OTHER_ZERO|;
			sum_OTHER_ZERO = natural_product_successor_recursion(ZERO, N, N1, ZERO, OTHER_ZERO)(successor_N1, N_cond, product_OTHER_ZERO);
			sum_ZERO = natural_sum_zero_identity(ZERO)(zero_is_natural);
			equal_ZERO = natural_sum_unique(ZERO, ZERO, ZERO, OTHER_ZERO)(sum_ZERO, sum_OTHER_ZERO);
			return equality_consistency[<Q: is_natural_product(ZERO, N1, Q)>](ZERO, OTHER_ZERO)(equal_ZERO)(product_OTHER_ZERO);
		}

		return R_def(N1)(N1_in_NATURALS, N1_cond);
	}

	NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure_R);
	given |X|;
	implies X_in_NATURALS;
	X_in_R = expand(NATURALS_subset_R)(X)(X_in_NATURALS);
	X_in_NATURALS, result = R_def(X)(X_in_R);

	return result;
}

//Prove the symmetric version of the product recursion identity
prove natural_product_successor_recursion2: *X*Y*SX*P0*P1(is_successor(X, SX) & is_natural_product(X, Y, P0) & is_natural_product(SX, Y, P1) -> is_natural_sum(P0, Y, P1)){
	empty_in_naturals, closure_naturals = expand(NATURALS_inductive);

	//W induct on Y
	R_def = axiom_specify[<Y: *X*SX*P0*P1(is_successor(X, SX) & is_natural_product(X, Y, P0) & is_natural_product(SX, Y, P1) -> is_natural_sum(P0, Y, P1))>](NATURALS)|R|;

	prove ZERO_in_R: *X*SX*P0*P1(is_successor(X, SX) & is_natural_product(X, ZERO, P0) & is_natural_product(SX, ZERO, P1) -> is_natural_sum(P0, ZERO, P1)){
		given |X, SX, P0, P1|;
		implies successor_SX, product_P0, product_P1;
		X_in_NATURALS, ZERO_in_NATURALS, tuple_condition = expand(product_P0);
		SX_in_NATURALS, ZERO_in_NATURALS, tuple_condition = expand(product_P1);
		other_product_P0 = natural_product_zero_identity(X)(X_in_NATURALS);
		other_product_P1 = natural_product_zero_identity(SX)(SX_in_NATURALS);
		P0_equal_ZERO = natural_product_unique(X, ZERO, P0, ZERO)(product_P0, other_product_P0);
		P1_equal_ZERO = natural_product_unique(SX, ZERO, P1, ZERO)(product_P1, other_product_P1);
		ZERO_sum_ZERO = natural_sum_zero_identity(ZERO)(zero_is_natural);
		P0_sum_ZERO = equality_consistency[<Q: is_natural_sum(Q, ZERO, ZERO)>](P0, ZERO)(P0_equal_ZERO)(ZERO_sum_ZERO);
		return equality_consistency[<Q: is_natural_sum(P0, ZERO, Q)>](P1, ZERO)(P1_equal_ZERO)(P0_sum_ZERO);
	}

	ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);

	prove closure_R: *N*N1(N in R & is_successor(N, N1) -> N1 in R){
		given |N, N1|;
		implies N_in_R, successor_N1;
		N_in_NATURALS, N_cond = R_def(N)(N_in_R);
		N1_in_NATURALS = closure_naturals(N, N1)(N_in_NATURALS, successor_N1);
		prove N1_cond: *X*SX*P0*P1(is_successor(X, SX) & is_natural_product(X, N1, P0) & is_natural_product(SX, N1, P1) -> is_natural_sum(P0, N1, P1)){
			given |X, SX, P0, P1|;
			implies successor_SX, product_P0, product_P1;
			X_in_NATURALS, N1_in_NATURALS, tuple_condition = expand(product_P0);
			SX_in_NATURALS, N1_in_NATURALS, tuple_condition = expand(product_P1);
			X_N_in_NATURALS, product_X_N = natural_product(X, N)(X_in_NATURALS, N_in_NATURALS)|X_N|;
			SX_N_in_NATURALS, product_SX_N = natural_product(SX, N)(SX_in_NATURALS, N_in_NATURALS)|SX_N|;
			X_N_sum_X = natural_product_successor_recursion(X, N, N1, X_N, P0)(successor_N1, product_X_N, product_P0);
			SX_N_sum_SX = natural_product_successor_recursion(SX, N, N1, SX_N, P1)(successor_N1, product_SX_N, product_P1);
			X_N_sum_N = N_cond(X, SX, X_N, SX_N)(successor_SX, product_X_N, product_SX_N);
			OTHER_SX_in_NATURALS, X_sum_ONE = natural_sum(X, ONE)(X_in_NATURALS, one_is_natural)|OTHER_SX|;
			successor_OTHER_SX = natural_sum_successor(X, OTHER_SX)(X_sum_ONE);
			equal_SX = successor_unique(X, SX, OTHER_SX)(successor_SX, successor_OTHER_SX);
			X_sum_ONE = equality_consistency[<Q: is_natural_sum(X, ONE, Q)>](SX, OTHER_SX)(equal_SX)(X_sum_ONE);
			SX_N_PLUS_X_in_NATURALS, SX_N_sum_X = natural_sum(SX_N, X)(SX_N_in_NATURALS, X_in_NATURALS)|SX_N_PLUS_X|;
			other_sum_P1 = natural_sum_associative2(SX_N, X, ONE, P1, SX_N_PLUS_X, SX)(X_sum_ONE, SX_N_sum_SX, SX_N_sum_X);
			N_PLUS_X_in_NATURALS, N_sum_X = natural_sum(N, X)(N_in_NATURALS, X_in_NATURALS)|N_PLUS_X|;
			other_sum_SX_N_PLUS_X = natural_sum_associative(X_N, N, X, SX_N_PLUS_X, SX_N, N_PLUS_X)(X_N_sum_N, SX_N_sum_X, N_sum_X);
			X_sum_N = natural_sum_commutative(N, X, N_PLUS_X)(N_sum_X);
			P0_sum_N = natural_sum_associative2(X_N, X, N, SX_N_PLUS_X, P0, N_PLUS_X)(X_sum_N, other_sum_SX_N_PLUS_X, X_N_sum_X);
			OTHER_N1_in_NATURALS, sum_OTHER_N1 = natural_sum(N, ONE)(N_in_NATURALS, one_is_natural)|OTHER_N1|;
			successor_OTHER_N1 = natural_sum_successor(N, OTHER_N1)(sum_OTHER_N1);
			equal_N1 = successor_unique(N, N1, OTHER_N1)(successor_N1, successor_OTHER_N1);
			N_sum_ONE = equality_consistency[<Q: is_natural_sum(N, ONE, Q)>](N1, OTHER_N1)(equal_N1)(sum_OTHER_N1);
			return natural_sum_associative(P0, N, ONE, P1, SX_N_PLUS_X, N1)(P0_sum_N, other_sum_P1, N_sum_ONE);
		}

		return R_def(N1)(N1_in_NATURALS, N1_cond);
	}

	NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure_R);
	given |X, Y, SX, P0, P1|;
	implies successor_SX, product_P0, product_P1;
	X_in_NATURALS, Y_in_NATURALS, tuple_condition = expand(product_P0);
	Y_in_R = expand(NATURALS_subset_R)(Y)(Y_in_NATURALS);
	Y_in_NATURALS, result = R_def(Y)(Y_in_R);

	return result(X, SX, P0, P1)(successor_SX, product_P0, product_P1);
}

//Prove that the natural product is commutative
prove natural_product_commutative: *X*Y*Z(is_natural_product(X, Y, Z) -> is_natural_product(Y, X, Z)){
	empty_in_naturals, closure_naturals = expand(NATURALS_inductive);

	//We induct on X
	R_def = axiom_specify[<Q: *Y*Z(is_natural_product(Q, Y, Z) -> is_natural_product(Y, Q, Z))>](NATURALS)|R|;
	prove ZERO_in_R: *Y*Z(is_natural_product(ZERO, Y, Z) -> is_natural_product(Y, ZERO, Z)){
		given |Y, Z|;
		implies ZERO_product_Y;
		ZERO_in_NATURALS, Y_in_NATURALS, tuple_condition = expand(ZERO_product_Y);
		other_product = natural_product_zero_identity2(Y)(Y_in_NATURALS);
		Z_equal_ZERO = natural_product_unique(ZERO, Y, Z, ZERO)(ZERO_product_Y, other_product);
		Y_product_ZERO = natural_product_zero_identity(Y)(Y_in_NATURALS);
		return equality_consistency[<Q: is_natural_product(Y, ZERO, Q)>](Z, ZERO)(Z_equal_ZERO)(Y_product_ZERO);
	}
	ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);

	prove closure_R: *N*N1(N in R & is_successor(N, N1) -> N1 in R){
		given |N, N1|;
		implies N_in_R, successor_N1;
		N_in_NATURALS, N_cond = R_def(N)(N_in_R);
		N1_in_NATURALS = closure_naturals(N, N1)(N_in_NATURALS, successor_N1);
		prove N1_cond: *Y*Z(is_natural_product(N1, Y, Z) -> is_natural_product(Y, N1, Z)){
			given |Y, Z|;
			implies N1_product_Y;
			N1_in_NATURALS, Y_in_NATURALS, tuple_condition = expand(N1_product_Y);
			PZ_in_NATURALS, product_PZ = natural_product(N, Y)(N_in_NATURALS, Y_in_NATURALS)|PZ|;
			PZ_sum_Y = natural_product_successor_recursion2(N, Y, N1, PZ, Z)(successor_N1, product_PZ, N1_product_Y);
			OTHER_Z_in_NATURALS, product_OTHER_Z = natural_product(Y, N1)(Y_in_NATURALS, N1_in_NATURALS)|OTHER_Z|;
			other_product_PZ = N_cond(Y, PZ)(product_PZ);
			other_sum_Z = natural_product_successor_recursion(Y, N, N1, PZ, OTHER_Z)(successor_N1, other_product_PZ, product_OTHER_Z);
			equal_Z = natural_sum_unique(PZ, Y, Z, OTHER_Z)(PZ_sum_Y, other_sum_Z);
			return equality_consistency[<Q: is_natural_product(Y, N1, Q)>](Z, OTHER_Z)(equal_Z)(product_OTHER_Z);
		}
		return R_def(N1)(N1_in_NATURALS, N1_cond);
	}

	NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure_R);
	given |X, Y, Z|;
	implies X_product_Y;
	X_in_NATURALS, Y_in_NATURALS, tuple_condition = expand(X_product_Y);
	X_in_R = expand(NATURALS_subset_R)(X)(X_in_NATURALS);
	X_in_NATURALS, result = R_def(X)(X_in_R);
	return result(Y, Z)(X_product_Y);
}


define is_natural_numbers(N): *X(X in N <-> *I(is_inductive_set(I) -> X in I));

prove natural_numbers_exist: ^N(is_natural_numbers(N)){
	is_inductive = axiom_infinity|INDUCTIVE_SET|;
	specified = axiom_specify[<X: *I(is_inductive_set(I) -> X in I)>](INDUCTIVE_SET)|N|;
	choose N;
	prove natural_numbers_def: *X(X in N <-> *I(is_inductive_set(I) -> X in I)){
		given |X|;
		prove lemma0: X in N -> *I(is_inductive_set(I) -> X in I){
			implies X_in_N;
			extract specified(X)(X_in_N): X_in_INDUCTIVE_SET, result;
			return result;
		}
		prove lemma1: *I(is_inductive_set(I) -> X in I) -> X in N{
			implies in_all_inductive;
			X_in_INDUCTIVE_SET = in_all_inductive(INDUCTIVE_SET)(is_inductive);
			return specified(X)(X_in_INDUCTIVE_SET, in_all_inductive);
		}
		return iff(lemma0, lemma1);
	}
	return #is_natural_numbers(N)(natural_numbers_def);
}

prove natural_numbers_unique: *N*M(is_natural_numbers(N) & is_natural_numbers(M) -> equal_sets(N, M)){
	given |N, M|;
	implies both_natural_numbers;
	extract both_natural_numbers: natural_numbers_N, natural_numbers_M;
	return definition_uniqueness_lemma[<X: *I(is_inductive_set(I) -> X in I)>](N, M)(expand(natural_numbers_N), expand(natural_numbers_M));
}

naturals_definition = expand(natural_numbers_exist|NATURALS|);

prove NATURALS_inductive: is_inductive_set(NATURALS){
	prove lemma0: ^E(E in NATURALS & is_empty(E)){
		choose EMPTY_SET;
		empty = #is_empty(EMPTY_SET)(empty_set_condition);
		prove lemma: *I(is_inductive_set(I) -> EMPTY_SET in I){
			given |I|;
			implies is_inductive;
			extract expand(is_inductive): empty_condition, closure;
			extract empty_condition|EMPTY_OTHER|: empty_in, is_empty_other;
			empty_equal = empty_set_unique(EMPTY_OTHER, EMPTY_SET)(is_empty_other, empty);
			return equality_consistency[<X: X in I>](EMPTY_OTHER, EMPTY_SET)(empty_equal)(empty_in);
		}
		return and(naturals_definition(EMPTY_SET)(lemma), empty);
	}
	prove lemma1: *Y*Z(Y in NATURALS & is_successor(Y, Z) -> Z in NATURALS){
		given |Y, Z|;
		implies both;
		extract both: Y_in_NATURALS, Z_successor;
		prove lemma: *I(is_inductive_set(I) -> Z in I){
			given |I|;
			implies is_inductive;
			extract expand(is_inductive): empty_condition, closure;
			Y_in_I = naturals_definition(Y)(Y_in_NATURALS)(I)(is_inductive);
			return closure(Y, Z)(Y_in_I, Z_successor);
		}
		return naturals_definition(Z)(lemma);
	}
	return #is_inductive_set(NATURALS)(lemma0, lemma1);
}

prove NATURALS_contain_EMPTY_SET: EMPTY_SET in NATURALS{
	extract expand(NATURALS_inductive): empty_in_NATURALS, NATURALS_closure;
	extract empty_in_NATURALS|EMPTY_OTHER|: EMPTY_OTHER_in_NATURALS, EMPTY_OTHER_def;
	empty_EMPTY = #is_empty(EMPTY_SET)(empty_set_condition);
	EMPTY_equal = empty_set_unique(EMPTY_OTHER, EMPTY_SET)(EMPTY_OTHER_def, empty_EMPTY);
	return equality_consistency[<S: S in NATURALS>](EMPTY_OTHER, EMPTY_SET)(EMPTY_equal)(EMPTY_OTHER_in_NATURALS);
}

zero_definition = copy_set(EMPTY_SET)|ZERO|;
zero_is_natural = equality_consistency[<S: S in NATURALS>](EMPTY_SET, ZERO)(zero_definition)(NATURALS_contain_EMPTY_SET);
one_definition = successor(ZERO)|ONE|;
prove one_is_natural: ONE in NATURALS{
	extract expand(NATURALS_inductive): empty_in_naturals, closure_naturals;
	return closure_naturals(ZERO, ONE)(zero_is_natural, one_definition);
}
two_definition = successor(ONE)|TWO|;
prove two_is_natural: TWO in NATURALS{
	extract expand(NATURALS_inductive): empty_in_naturals, closure_naturals;
	return closure_naturals(ONE, TWO)(one_is_natural, two_definition);
}
three_definition = successor(TWO)|THREE|;
prove three_is_natural: THREE in NATURALS{
	extract expand(NATURALS_inductive): empty_in_naturals, closure_naturals;
	return closure_naturals(TWO, THREE)(two_is_natural, three_definition);
}
four_definition = successor(THREE)|FOUR|;
prove four_is_natural: FOUR in NATURALS{
	extract expand(NATURALS_inductive): empty_in_naturals, closure_naturals;
	return closure_naturals(THREE, FOUR)(three_is_natural, four_definition);
}

prove NATURALS_induction: *S(ZERO in S & *Y*Z(Y in S & is_successor(Y, Z) -> Z in S) -> is_subset(NATURALS, S)){
	given |S|;
	implies premise;
	extract premise: ZERO_in_S, closure;
	prove lemma: ^E(E in S & is_empty(E)){
		choose EMPTY_SET;
		EMPTY_SET_in_S = equality_consistency[<X: X in S>](EMPTY_SET, ZERO)(zero_definition)(ZERO_in_S);
		return and(EMPTY_SET_in_S, #is_empty(EMPTY_SET)(empty_set_condition));
	}
	inductive_S = #is_inductive_set(S)(lemma, closure);
	prove subset_def: *X(X in NATURALS -> X in S){
		given |X|;
		implies X_in_NATURALS;
		return naturals_definition(X)(X_in_NATURALS)(S)(inductive_S);
	}
	return #is_subset(NATURALS, S)(subset_def);
}

prove NATURALS_nonzero_successor: *N(N in NATURALS -> equal_sets(N, ZERO) | ^M(M in NATURALS & is_successor(M, N))){
	S_def = axiom_specify[<N: equal_sets(N, ZERO) | ^M(M in NATURALS & is_successor(M, N))>](NATURALS)|S|;
	ZERO_in_S = S_def(ZERO)(zero_is_natural, or(equal_sets_reflexive(ZERO), <:^M(M in NATURALS & is_successor(M, ZERO))>));
	extract expand(NATURALS_inductive): contains_empty, NATURALS_closure;
	prove closure: *Y*Z(Y in S & is_successor(Y, Z) -> Z in S){
		given |Y, Z|;
		implies Y_in_S, successor_Y;
		extract S_def(Y)(Y_in_S): Y_in_NATURALS, condition;
		Z_in_NATURALS = NATURALS_closure(Y, Z)(Y_in_NATURALS, successor_Y);
		prove lemma: ^M(M in NATURALS & is_successor(M, Z)){
			choose Y;
			return and(Y_in_NATURALS, successor_Y);
		}
		return S_def(Z)(Z_in_NATURALS, or(<:equal_sets(Z, ZERO)>, lemma));
	}
	NATURALS_subset_S = NATURALS_induction(S)(ZERO_in_S, closure);
	given |N|;
	implies N_in_NATURALS;
	N_in_S = expand(NATURALS_subset_S)(N)(N_in_NATURALS);
	extract S_def(N)(N_in_S): N_in_NATURALS, result;
	return result;
}

//We want to show that if a number has a successor, that the number is not zero (for later purposes)
prove NATURAL_successor_nonzero: *A*B(is_successor(A, B) -> ~equal_sets(B, ZERO)){
	given |A, B|;
	implies successor_B;
	not equal_B_ZERO;
	equal_B_EMPTY_SET = equality_consistency[<Q: equal_sets(B, Q)>](EMPTY_SET, ZERO)(zero_definition)(equal_B_ZERO);
	A_in_B = expand(successor_B)(A)(or(<:A in A>, equal_sets_reflexive(A)));
	A_in_EMPTY_SET = equality_consistency[<Q: A in Q>](B, EMPTY_SET)(equal_B_EMPTY_SET)(A_in_B);
	return empty_set_condition(A)(A_in_EMPTY_SET);
}

//Define what it means for one natural number to be less than (or equal to) another
//Note that the definition is the same as the definition of a subset
define NATURAL_less_than(A, B): *X(X in A -> X in B);

prove NATURAL_less_than_reflexive: *A(NATURAL_less_than(A, A)){
	given |A|;
	prove less_than_def: *X(X in A -> X in A){
		given |X|;
		implies X_in_A;
		return X_in_A;
	}
	return #NATURAL_less_than(A, A)(less_than_def);
}

prove NATURAL_less_than_transitive: *X*Y*Z(NATURAL_less_than(X, Y) & NATURAL_less_than(Y, Z) -> NATURAL_less_than(X, Z)){
	given |X, Y, Z|;
	implies less_than_XY, less_than_YZ;
	prove less_than_def: *S(S in X -> S in Z){
		given |S|;
		implies S_in_X;
		S_in_Y = expand(less_than_XY)(S)(S_in_X);
		return expand(less_than_YZ)(S)(S_in_Y);
	}
	return #NATURAL_less_than(X, Z)(less_than_def);
}

define NATURAL_less_than_strict(A, B): ^S(is_successor(A, S) & NATURAL_less_than(S, B));

prove NATURAL_less_than_strict_successor: *A*B(is_successor(A, B) -> NATURAL_less_than_strict(A, B)){
	given |A, B|;
	implies successor_B;
	prove less_than_strict_def: ^S(is_successor(A, S) & NATURAL_less_than(S, B)){
		choose B;
		return and(successor_B, NATURAL_less_than_reflexive(B));
	}
	return #NATURAL_less_than_strict(A, B)(less_than_strict_def);
}

prove NATURAL_less_than_weaken: *A*B(NATURAL_less_than_strict(A, B) -> NATURAL_less_than(A, B)){
	given |A, B|;
	implies less_than_strict;
	extract expand(less_than_strict)|S|: successor_S, less_than;
	prove less_than_def: *X(X in A -> X in B){
		given |X|;
		implies X_in_A;
		X_in_S = expand(successor_S)(X)(or(X_in_A, <:equal_sets(X, A)>));
		return expand(less_than)(X)(X_in_S);
	}
	return #NATURAL_less_than(A, B)(less_than_def);
}

//The natural numbers here have been defined such that N is the set {0, 1..., N - 1}
//Here we formally prove this
prove NATURALS_interpretation: *N(N in NATURALS -> *X(X in N <-> X in NATURALS & NATURAL_less_than_strict(X, N))){
	//First we take the set of all natural numbers for which the statement is true
	//Then we will apply induction
	R_def = axiom_specify[<N: *X(X in N <-> X in NATURALS & NATURAL_less_than_strict(X, N))>](NATURALS)|R|;
	prove ZERO_in_R: *X(X in ZERO <-> X in NATURALS & NATURAL_less_than_strict(X, ZERO)){
		given |X|;
		prove lemma0: X in ZERO -> X in NATURALS & NATURAL_less_than_strict(X, ZERO){
			implies X_in_ZERO;
			X_in_EMPTY_SET = equality_consistency[<S: X in S>](EMPTY_SET, ZERO)(zero_definition)(X_in_ZERO);
			return axiom_absurdity[<:X in NATURALS & NATURAL_less_than_strict(X, ZERO)>](empty_set_condition(X)(X_in_EMPTY_SET));
		}
		prove lemma1: X in NATURALS & NATURAL_less_than_strict(X, ZERO) -> X in ZERO{
			implies X_in_NATURALS, less_than_strict;
			extract expand(less_than_strict)|S|: successor, less_than;
			X_in_S = expand(successor)(X)(or(<:X in X>, equal_sets_reflexive(X)));
			return expand(less_than)(X)(X_in_S);
		}
		return iff(lemma0, lemma1);
	}
	ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);
	prove closure: *Y*Z(Y in R & is_successor(Y, Z) -> Z in R){
		given |Y, Z|;
		implies Y_in_R, successor_Z;
		extract R_def(Y)(Y_in_R): Y_in_NATURALS, Y_cond;
		extract expand(NATURALS_inductive): empty_exists, successor_closure;
		Z_in_NATURALS = successor_closure(Y, Z)(Y_in_NATURALS, successor_Z);
		prove Z_in_R: *X(X in Z <-> X in NATURALS & NATURAL_less_than_strict(X, Z)){
			given |X|;
			prove lemma0: X in Z -> X in NATURALS & NATURAL_less_than_strict(X, Z){
				implies X_in_Z;
				X_in_Y_or_equal_Z = expand(successor_Z)(X)(X_in_Z);
				return branch(X_in_Y_or_equal_Z, X_in_Y, equal_Y){
					extract Y_cond(X)(X_in_Y): X_in_NATURALS , X_less_than_strict;
					extract expand(X_less_than_strict)|T|: successor_T, T_less_than_Y;
					Y_less_than_Z = NATURAL_less_than_weaken(Y, Z)(NATURAL_less_than_strict_successor(Y, Z)(successor_Z));
					prove less_than_strict_def: ^S(is_successor(X, S) & NATURAL_less_than(S, Z)){
						choose T;
						return and(successor_T, NATURAL_less_than_transitive(T, Y, Z)(T_less_than_Y, Y_less_than_Z));
					}
					return and(X_in_NATURALS, #NATURAL_less_than_strict(X, Z)(less_than_strict_def));
				} or {
					X_in_NATURALS = equality_consistency[<S: S in NATURALS>](X, Y)(equal_Y)(Y_in_NATURALS);
					Y_less_than_strict_Z = NATURAL_less_than_strict_successor(Y, Z)(successor_Z);
					return and(X_in_NATURALS, equality_consistency[<S: NATURAL_less_than_strict(S, Z)>](X, Y)(equal_Y)(Y_less_than_strict_Z));
				};
			}
			prove lemma1: X in NATURALS & NATURAL_less_than_strict(X, Z) -> X in Z{
				implies X_in_NATURALS, X_less_than_strict_Z;
				extract expand(X_less_than_strict_Z)|T|: successor_T, T_less_than_Z;
				X_in_T = expand(successor_T)(X)(or(<:X in X>, equal_sets_reflexive(X)));
				return expand(T_less_than_Z)(X)(X_in_T);
			}
			return iff(lemma0, lemma1);
		}
		return R_def(Z)(Z_in_NATURALS, Z_in_R);
	}
	NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure);
	given |N|;
	implies N_in_NATURALS;
	N_in_R = expand(NATURALS_subset_R)(N)(N_in_NATURALS);
	extract R_def(N)(N_in_R): N_in_NATURALS, result;
	return result;
}
//Because of the proof above, I am now sure that I have defined the natural numbers correctly

//We need to show that if the predecessor of a natural number exists, it is a natural number
prove NATURALS_predecessor_closure: *N*M(N in NATURALS & is_successor(M, N) -> M in NATURALS){
	given |N, M|;
	implies N_in_NATURALS, successor_N;
	M_in_N = expand(successor_N)(M)(or(<:M in M>, equal_sets_reflexive(M)));
	extract NATURALS_interpretation(N)(N_in_NATURALS)(M)(M_in_N): M_in_NATURALS, M_less_than_strict;
	return M_in_NATURALS;
}

//Define an "addition function"
//It's quite a hefty definition, but it's just a stepping stone towards a better definition of addition
//It is based on the definition of addition in Peano arithmetic
define is_addition_function(F): is_function(F) & ^T(is_cross_product(NATURALS, NATURALS, T) & is_domain(F, T)) & is_codomain(F, NATURALS) & *X*Z(X in NATURALS & is_tuple(ZERO, X, Z) -> are_related(Z, X, F)) & *X*Y*T0*Z0(is_tuple(X, Y, T0) & are_related(T0, Z0, F) -> ^SX^T1^Z1(is_successor(X, SX) & is_tuple(SX, Y, T1) & are_related(T1, Z1, F) & is_successor(Z0, Z1)));

//Prove that addition exists!
//There are a lot of irrelevant results and definitions that need to be made for this proof
//So I encapsulated them inside of this very large proof
//The definition of an "addition function" characterizes the peano axioms of arithmetic
prove addition_function_exists: ^ADDITION_FUNCTION(is_addition_function(ADDITION_FUNCTION)){
	C_cross_product = cross_product(NATURALS, NATURALS)|C|;
	C_def = expand(C_cross_product);
	extract expand(NATURALS_inductive): empty_in_naturals, closure_naturals;
	
	//We define an "addition class" to be the inverse image of the addition function for some N.
	//However, we construct it in an alternative way, which allows us to define addition
	//Despite the recursive definition of an addition function.

	//When A is the addition class for a natural number N
	define is_addition_class(N, A): *B(B in A <-> ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, N)) | ^P^S^T(is_successor(P, C) & is_successor(D, S) & is_tuple(P, S, T) & T in A))));

	//The second lemma for this theorem is that the addition classes exist for all natural numbers
	prove addition_classes_exist: *N(N in NATURALS -> ^A(is_addition_class(N, A) & is_subset(A, C))){
		//We proceed by induction
		R_def = axiom_specify[<N: ^A(is_addition_class(N, A) & is_subset(A, C))>](NATURALS)|R|;
		//Base case
		prove ZERO_in_R: ^A(is_addition_class(ZERO, A) & is_subset(A, C)){
			A_def = axiom_specify[<S: is_tuple(ZERO, ZERO, S)>](C)|A|;
			choose A;
			prove addition_class_def: *B(B in A <-> ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, ZERO)) | ^P^S^T(is_successor(P, C) & is_successor(D, S) & is_tuple(P, S, T) & T in A)))){
				given |B|;
				prove lemma0: B in A -> ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, ZERO)) | ^P^S^T(is_successor(P, C) & is_successor(D, S) & is_tuple(P, S, T) & T in A))){
					implies B_in_A;
					extract A_def(B)(B_in_A): B_in_C, B_tuple_ZERO_ZERO;
					choose ZERO, ZERO;
					condition = or(and(equal_sets_reflexive(ZERO), equal_sets_reflexive(ZERO)), <:^P^S^T(is_successor(P, ZERO) & is_successor(ZERO, S) & is_tuple(P, S, T) & T in A)>);
					return and(B_tuple_ZERO_ZERO, condition);
				}
				prove lemma1: ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, ZERO)) | ^P^S^T(is_successor(P, C) & is_successor(D, S) & is_tuple(P, S, T) & T in A))) -> B in A{
					implies premise;
					extract premise|C, D|: tuple_B, either_condition;
					return branch(either_condition, equal_ZERO, predecessor){
						extract equal_ZERO: C_equal_ZERO, D_equal_ZERO;
						B_tuple_ZERO_D = equality_consistency[<S: is_tuple(S, D, B)>](C, ZERO)(C_equal_ZERO)(tuple_B);
						B_tuple_ZERO_ZERO = equality_consistency[<S: is_tuple(ZERO, S, B)>](D, ZERO)(D_equal_ZERO)(B_tuple_ZERO_D);
						prove cross_product_condition: ^E^F(E in NATURALS & F in NATURALS & is_tuple(E, F, B)){
							choose ZERO, ZERO;
							return and(zero_is_natural, zero_is_natural, B_tuple_ZERO_ZERO);
						}
						B_in_C = C_def(B)(cross_product_condition);
						return A_def(B)(B_in_C, B_tuple_ZERO_ZERO);
					} or {
						extract predecessor|P, S, T|: predecessor_P, successor_S, tuple_T, T_in_A;
						D_in_S = expand(successor_S)(D)(or(<:D in D>, equal_sets_reflexive(D)));
						extract A_def(T)(T_in_A): T_in_C, tuple_ZERO_ZERO;
						T_equal_T = equal_sets_reflexive(T);
						extract tuple_equal_condition(P, S, ZERO, ZERO, T, T)(tuple_T, tuple_ZERO_ZERO, T_equal_T): equal_P_ZERO, equal_S_ZERO;
						equal_S_EMPTY_SET = equal_sets_transitive(S, ZERO, EMPTY_SET)(equal_S_ZERO, equal_sets_symmetric(EMPTY_SET, ZERO)(zero_definition));
						D_in_EMPTY_SET = equality_consistency[<U: D in U>](S, EMPTY_SET)(equal_S_EMPTY_SET)(D_in_S);
						absurdity = empty_set_condition(D)(D_in_EMPTY_SET);
						return axiom_absurdity[goal](absurdity);
					};
				}
				return iff(lemma0, lemma1);
			}
			addition_class = #is_addition_class(ZERO, A)(addition_class_def);
			prove subset_def: *X(X in A -> X in C){
				given |X|;
				implies X_in_A;
				extract A_def(X)(X_in_A): X_in_C, tuple_X;
				return X_in_C;
			}
			A_subset_C = #is_subset(A, C)(subset_def);
			return and(addition_class, A_subset_C);
		}
		ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);
		//Inductive step
		prove closure_R: *Y*Z(Y in R & is_successor(Y, Z) -> Z in R){
			given |Y, Y_1|;
			implies Y_in_R, successor_Y_1;
			extract R_def(Y)(Y_in_R): Y_in_NATURALS, both;
			Y_1_in_NATURALS = closure_naturals(Y, Y_1)(Y_in_NATURALS, successor_Y_1);
			extract both|F|: addition_class, F_subset_C;
			F_addition_class = expand(addition_class);
			G_def = axiom_specify[<Q: ^C^D(is_tuple(C, D, Q) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^T(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T) & T in F)))>](C)|G|;
			prove G_addition_class: *B(B in G <-> ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^D_1^T(is_successor(C_NEG1, C) & is_successor(D, D_1) & is_tuple(C_NEG1, D_1, T) & T in G)))){
				given |B|;
				prove lemma0: B in G -> ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^D_1^T(is_successor(C_NEG1, C) & is_successor(D, D_1) & is_tuple(C_NEG1, D_1, T) & T in G))){
					implies B_in_G;
					extract G_def(B)(B_in_G): B_in_C, B_condition;
					extract B_condition|C, D|: tuple_B, either_B;
					extract C_def(B)(B_in_C)|C_OTHER, D_OTHER|: C_OTHER_in_NATURALS, D_OTHER_in_NATURALS, tuple_B_other;
					extract tuple_equal_condition(C, D, C_OTHER, D_OTHER, B, B)(tuple_B, tuple_B_other, equal_sets_reflexive(B)): C_equal, D_equal;
					C_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](C, C_OTHER)(C_equal)(C_OTHER_in_NATURALS);
					D_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](D, D_OTHER)(D_equal)(D_OTHER_in_NATURALS);
					choose C, D;
					return branch(either_B, equal_initial, predecessor_exists){
						return and(tuple_B, or(equal_initial, <:^C_NEG1^D_1^T(is_successor(C_NEG1, C) & is_successor(D, D_1) & is_tuple(C_NEG1, D_1, T) & T in G)>));
					} or {
						extract predecessor_exists|C_NEG1, T0|: predecessor_C_NEG1, tuple_T0, T0_in_F;
						extract F_addition_class(T0)(T0_in_F)|C_NEG1_OTHER, D_OTHER|: tuple_T0_other, either_T0;
						extract tuple_equal_condition(C_NEG1, D, C_NEG1_OTHER, D_OTHER, T0, T0)(tuple_T0, tuple_T0_other, equal_sets_reflexive(T0)): equal_C_NEG1, equal_D;
						//D_OTHER is a different object, so I overwrite this variable in this scope because I use it later
						D_OTHER_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](D, D_OTHER)(equal_D)(D_in_NATURALS);
						return branch(either_T0, equal_initial, predecessor_exists){
							extract equal_initial: equal_C_NEG1_OTHER_ZERO, equal_D_OTHER_Y;
							equal_C_NEG1_ZERO = equal_sets_transitive(C_NEG1, C_NEG1_OTHER, ZERO)(equal_C_NEG1, equal_C_NEG1_OTHER_ZERO);
							equal_D_Y = equal_sets_transitive(D, D_OTHER, Y)(equal_D, equal_D_OTHER_Y);
							successor_D_1 = successor(D)|D_1|;
							successor_D_1_Y = equality_consistency[<Q: is_successor(Q, D_1)>](D, Y)(equal_D_Y)(successor_D_1);
							equal_D_1_Y_1 = successor_unique(Y, D_1, Y_1)(successor_D_1_Y, successor_Y_1);
							tuple_T = tuple(C_NEG1, D_1)|T|;
							C_NEG1_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](C_NEG1, ZERO)(equal_C_NEG1_ZERO)(zero_is_natural);
							D_1_in_NATURALS = closure_naturals(Y, D_1)(Y_in_NATURALS, successor_D_1_Y);
							prove T_in_G: ^C^D(is_tuple(C, D, T) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^T(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T) & T in F))){
								choose C_NEG1, D_1;
								return and(tuple_T, or(and(equal_C_NEG1_ZERO, equal_D_1_Y_1), <:^C_NEG2^T(is_successor(C_NEG2, C_NEG1) & is_tuple(C_NEG2, D_1, T) & T in F)>));
							}
							prove T_in_C: ^C^D(C in NATURALS & D in NATURALS & is_tuple(C, D, T)){
								choose C_NEG1, D_1;
								return and(C_NEG1_in_NATURALS, D_1_in_NATURALS, tuple_T);
							}
							T_in_C = C_def(T)(T_in_C);
							T_in_G = G_def(T)(T_in_C, T_in_G);
							prove condition: ^C_NEG1^D_1^T(is_successor(C_NEG1, C) & is_successor(D, D_1) & is_tuple(C_NEG1, D_1, T) & T in G){
								choose C_NEG1, D_1, T;
								return and(predecessor_C_NEG1, successor_D_1, tuple_T, T_in_G);
							}
							return and(tuple_B, or(<:equal_sets(C, ZERO) & equal_sets(D, Y_1)>, condition));
						} or {
							extract predecessor_exists|C_NEG2, D_1, T1|: predecessor_C_NEG2, successor_D_1, tuple_T1, T1_in_F;
							predecessor_C_NEG2 = equality_consistency[<Q: is_successor(C_NEG2, Q)>](C_NEG1, C_NEG1_OTHER)(equal_C_NEG1)(predecessor_C_NEG2);
							tuple_T2 = tuple(C_NEG1, D_1)|T2|;
							D_1_in_NATURALS = closure_naturals(D_OTHER, D_1)(D_OTHER_in_NATURALS, successor_D_1);
							successor_D_1 = equality_consistency[<Q: is_successor(Q, D_1)>](D, D_OTHER)(equal_D)(successor_D_1);
							prove T2_in_C: ^C_NEG1^D_1(C_NEG1 in NATURALS & D_1 in NATURALS & is_tuple(C_NEG1, D_1, T2)){
								choose C_NEG1, D_1;
								C_NEG1_in_NATURALS = NATURALS_predecessor_closure(C, C_NEG1)(C_in_NATURALS, predecessor_C_NEG1);
								return and(C_NEG1_in_NATURALS, D_1_in_NATURALS, tuple_T2);
							}
							T2_in_C = C_def(T2)(T2_in_C);
							prove condition: ^C_NEG1^D_1(is_tuple(C_NEG1, D_1, T2) & ((equal_sets(C_NEG1, ZERO) & equal_sets(D_1, Y_1)) | ^C_NEG2^T1(is_successor(C_NEG2, C_NEG1) & is_tuple(C_NEG2, D_1, T1) & T1 in F))){
								choose C_NEG1, D_1;
								prove condition: ^C_NEG2^T1(is_successor(C_NEG2, C_NEG1) & is_tuple(C_NEG2, D_1, T1) & T1 in F){
									choose C_NEG2, T1;
									return and(predecessor_C_NEG2, tuple_T1, T1_in_F);
								}
								return and(tuple_T2, or(<:equal_sets(C_NEG1, ZERO) & equal_sets(D_1, Y_1)>, condition));
							}
							T2_in_G = G_def(T2)(T2_in_C, condition);
							prove condition: ^C_NEG1^D_1^T2(is_successor(C_NEG1, C) & is_successor(D, D_1) & is_tuple(C_NEG1, D_1, T2) & T2 in G){
								choose C_NEG1, D_1, T2;
								return and(predecessor_C_NEG1, successor_D_1, tuple_T2, T2_in_G);
							}
							return and(tuple_B, or(<:equal_sets(C, ZERO) & equal_sets(D, Y_1)>, condition));
						};
					};
				}
				prove lemma1: ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^D_1^T(is_successor(C_NEG1, C) & is_successor(D, D_1) & is_tuple(C_NEG1, D_1, T) & T in G))) -> B in G{
					implies premise;
					extract premise|C, D|: tuple_B, either_B;
					return branch(either_B, equal_both, G_condition){
						extract equal_both: equal_C_ZERO, equal_D_Y_1;
						prove condition: ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^T(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T) & T in F))){
							choose C, D;
							return and(tuple_B, or(equal_both, <:^C_NEG1^T(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T) & T in F)>));
						}
						prove B_in_C: ^C^D(C in NATURALS & D in NATURALS & is_tuple(C, D, B)){
							choose C, D;
							C_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](C, ZERO)(equal_C_ZERO)(zero_is_natural);
							D_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](D, Y_1)(equal_D_Y_1)(Y_1_in_NATURALS);
							return and(C_in_NATURALS, D_in_NATURALS, tuple_B);
						}
						B_in_C = C_def(B)(B_in_C);
						return G_def(B)(B_in_C, condition);
					} or {
						extract G_condition|C_NEG1, D_1, T|: predecessor_C_NEG1, successor_D_1, tuple_T, T_in_G;
						extract G_def(T)(T_in_G): T_in_C, T_condition;
						extract T_condition|C_NEG1_OTHER, D_1_OTHER|: tuple_T_other, either_T;
						extract tuple_equal_condition(C_NEG1, D_1, C_NEG1_OTHER, D_1_OTHER, T, T)(tuple_T, tuple_T_other, equal_sets_reflexive(T)): equal_C_NEG1, equal_D_1;
						return branch(either_T, equal_initial, F_condition){
							extract equal_initial: equal_C_NEG1_ZERO, equal_D_1_Y_1;
							equal_C_NEG1_ZERO = equality_consistency[<Q: equal_sets(Q, ZERO)>](C_NEG1, C_NEG1_OTHER)(equal_C_NEG1)(equal_C_NEG1_ZERO);
							equal_D_1_Y_1 = equality_consistency[<Q: equal_sets(Q, Y_1)>](D_1, D_1_OTHER)(equal_D_1)(equal_D_1_Y_1);
							successor_D_1_Y = equality_consistency[<Q: is_successor(Y, Q)>](D_1, Y_1)(equal_D_1_Y_1)(successor_Y_1);
							equal_D_Y = predecessor_unique(D, Y, D_1)(successor_D_1, successor_D_1_Y);
							tuple_T0 = tuple(C_NEG1, D)|T0|;
							prove T0_in_F: ^C_NEG1^D(is_tuple(C_NEG1, D, T0) & ((equal_sets(C_NEG1, ZERO) & equal_sets(D, Y)) | ^P^S^T(is_successor(P, C_NEG1) & is_successor(D, S) & is_tuple(P, S, T) & T in F))){
								choose C_NEG1, D;
								return and(tuple_T0, or(and(equal_C_NEG1_ZERO, equal_D_Y), <:^P^S^T(is_successor(P, C_NEG1) & is_successor(D, S) & is_tuple(P, S, T) & T in F)>));
							}
							T0_in_F = F_addition_class(T0)(T0_in_F);
							prove condition: ^C_NEG1^T0(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T0) & T0 in F){
								choose C_NEG1, T0;
								return and(predecessor_C_NEG1, tuple_T0, T0_in_F);
							}
							prove condition: ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^T0(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T0) & T0 in F))){
								choose C, D;
								return and(tuple_B, or(<:equal_sets(C, ZERO) & equal_sets(D, Y_1)>, condition));
							}
							prove B_in_C: ^C^D(C in NATURALS & D in NATURALS & is_tuple(C, D, B)){
								choose C, D;
								C_NEG1_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](C_NEG1, ZERO)(equal_C_NEG1_ZERO)(zero_is_natural);
								C_in_NATURALS = closure_naturals(C_NEG1, C)(C_NEG1_in_NATURALS, predecessor_C_NEG1);
								D_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](D, Y)(equal_D_Y)(Y_in_NATURALS);
								return and(C_in_NATURALS, D_in_NATURALS, tuple_B);
							}
							B_in_C = C_def(B)(B_in_C);
							return G_def(B)(B_in_C, condition);
						} or {
							extract F_condition|C_NEG2, T0|: predecessor_C_NEG2, tuple_T0, T0_in_F;
							predecessor_C_NEG2 = equality_consistency[<Q: is_successor(C_NEG2, Q)>](C_NEG1, C_NEG1_OTHER)(equal_C_NEG1)(predecessor_C_NEG2);
							tuple_T0 = equality_consistency[<Q: is_tuple(C_NEG2, Q, T0)>](D_1, D_1_OTHER)(equal_D_1)(tuple_T0);
							tuple_T1 = tuple(C_NEG1, D)|T1|;
							prove T1_in_F: ^C_NEG2^D_1^T0(is_successor(C_NEG2, C_NEG1) & is_successor(D, D_1) & is_tuple(C_NEG2, D_1, T0) & T0 in F){
								choose C_NEG2, D_1, T0;
								return and(predecessor_C_NEG2, successor_D_1, tuple_T0, T0_in_F);
							}
							prove T1_in_F: ^C_NEG1^D(is_tuple(C_NEG1, D, T1) & ((equal_sets(C_NEG1, ZERO) & equal_sets(D, Y)) | ^C_NEG2^D_1^T0(is_successor(C_NEG2, C_NEG1) & is_successor(D, D_1) & is_tuple(C_NEG2, D_1, T0) & T0 in F))){
								choose C_NEG1, D;
								return and(tuple_T1, or(<:equal_sets(C_NEG1, ZERO) & equal_sets(D, Y)>, T1_in_F));
							}
							T1_in_F = F_addition_class(T1)(T1_in_F);
							//Here is where we use the stronger condition
							T1_in_C = expand(F_subset_C)(T1)(T1_in_F);
							extract C_def(T1)(T1_in_C)|C_NEG1_OTHER, D_OTHER|: C_NEG1_OTHER_in_NATURALS, D_OTHER_in_NATURALS, tuple_T1_other;
							extract tuple_equal_condition(C_NEG1, D, C_NEG1_OTHER, D_OTHER, T1, T1)(tuple_T1, tuple_T1_other, equal_sets_reflexive(T1)): equal_C_NEG1, equal_D;
							C_NEG1_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](C_NEG1, C_NEG1_OTHER)(equal_C_NEG1)(C_NEG1_OTHER_in_NATURALS);
							D_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](D, D_OTHER)(equal_D)(D_OTHER_in_NATURALS);
							C_in_NATURALS = closure_naturals(C_NEG1, C)(C_NEG1_in_NATURALS, predecessor_C_NEG1);
							prove condition: ^C_NEG1^T1(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T1) & T1 in F){
								choose C_NEG1, T1;
								return and(predecessor_C_NEG1, tuple_T1, T1_in_F);
							}
							prove condition: ^C^D(is_tuple(C, D, B) & ((equal_sets(C, ZERO) & equal_sets(D, Y_1)) | ^C_NEG1^T1(is_successor(C_NEG1, C) & is_tuple(C_NEG1, D, T1) & T1 in F))){
								choose C, D;
								return and(tuple_B, or(<:equal_sets(C, ZERO) & equal_sets(D, Y_1)>, condition));
							}
							prove B_in_C: ^C^D(C in NATURALS & D in NATURALS & is_tuple(C, D, B)){
								choose C, D;
								return and(C_in_NATURALS, D_in_NATURALS, tuple_B);
							}
							B_in_C = C_def(B)(B_in_C);
							return G_def(B)(B_in_C, condition);
						};
					};
				}
				return iff(lemma0, lemma1);
			}
			G_addition_class = #is_addition_class(Y_1, G)(G_addition_class);
			prove subset_def: *X(X in G -> X in C){
				given |X|;
				implies X_in_G;
				extract G_def(X)(X_in_G): X_in_C, G_condition;
				return X_in_C;
			}
			G_subset_C = #is_subset(G, C)(subset_def);
			prove Y_1_in_R: ^G(is_addition_class(Y_1, G) & is_subset(G, C)){
				choose G;
				return and(G_addition_class, G_subset_C);
			}
			return R_def(Y_1)(Y_1_in_NATURALS, Y_1_in_R);
		}
		NATURALS_subset_R = expand(NATURALS_induction(R)(ZERO_in_R, closure_R));
		given |N|;
		implies N_in_NATURALS;
		N_in_R = NATURALS_subset_R(N)(N_in_NATURALS);
		extract R_def(N)(N_in_R): N_in_NATURALS, addition_class_exists;
		result = addition_class_exists|A|;
		choose A;
		return result;
	}

	//Phew! That was the most important result of the proof. Next we need to prove that these addition classes cover all pairs of natural numbers.

	//This lemma shows that (0, x) belongs to an addition class of N if and only if x = N
	prove addition_class_initial_unique: *A*T*F*N(is_addition_class(N, F) & is_tuple(ZERO, A, T) -> (T in F <-> equal_sets(A, N))){
		given |A, T, F, N|;
		implies addition_class_F, tuple_T;
		prove lemma0: T in F -> equal_sets(A, N){
			implies T_in_F;
			extract expand(addition_class_F)(T)(T_in_F)|OTHER_ZERO, OTHER_A|: tuple_T_other, either;
			extract tuple_equal_condition(ZERO, A, OTHER_ZERO, OTHER_A, T, T)(tuple_T, tuple_T_other, equal_sets_reflexive(T)): equal_ZERO, equal_A;
			return branch(either, equal_both, predecessors){
				extract equal_both: equal_ZERO, equal_OTHER_A_N;
				return equal_sets_transitive(A, OTHER_A, N)(equal_A, equal_OTHER_A_N);
			} or {
				extract predecessors|C, D, T0|: predecessor_C, successor_D, tuple_T0, T0_in_F;
				not_zero = NATURAL_successor_nonzero(C, OTHER_ZERO)(predecessor_C);
				equal_OTHER_ZERO_ZERO = equal_sets_symmetric(ZERO, OTHER_ZERO)(equal_ZERO);
				absurdity = not_zero(equal_OTHER_ZERO_ZERO);
				return axiom_absurdity[goal](absurdity);
			};
		}
		prove lemma1: equal_sets(A, N) -> T in F{
			implies equal_A_N;
			prove condition: ^C^D(is_tuple(C, D, T) & ((equal_sets(C, ZERO) & equal_sets(D, N)) | ^P^S^T(is_successor(P, C) & is_successor(D, S) & is_tuple(P, S, T) & T in F))){
				choose ZERO, A;
				return and(tuple_T, or(and(equal_sets_reflexive(ZERO), equal_A_N), <:^P^S^T(is_successor(P, ZERO) & is_successor(A, S) & is_tuple(P, S, T) & T in F)>));
			}
			return expand(addition_class_F)(T)(condition);
		}
		return iff(lemma0, lemma1);
	}

	//Next we prove a crucial lemma to the next important result, again using induction
	//This result also shows the recursive peano axiom for addition
	prove addition_classes_cover_lemma: *A(A in NATURALS -> *B*T*F*N(N in NATURALS & is_addition_class(N, F) & is_tuple(A, B, T) & T in F -> ^S^T1^N1^F1(is_successor(A, S) & is_successor(N, N1) & is_addition_class(N1, F1) & is_tuple(S, B, T1) & T1 in F1))){
		//Again, we use induction!
		R_def = axiom_specify[<Q: *B*T*F*N(N in NATURALS & is_addition_class(N, F) & is_tuple(Q, B, T) & T in F -> ^S^T1^N1^F1(is_successor(Q, S) & is_successor(N, N1) & is_addition_class(N1, F1) & is_tuple(S, B, T1) & T1 in F1))>](NATURALS)|R|;
		//Base step
		prove ZERO_in_R: *B*T*F*N(N in NATURALS & is_addition_class(N, F) & is_tuple(ZERO, B, T) & T in F -> ^S^T1^N1^F1(is_successor(ZERO, S) & is_successor(N, N1) & is_addition_class(N1, F1) & is_tuple(S, B, T1) & T1 in F1)){
			given |B, T, F, N|;
			implies N_in_NATURALS, addition_class_F, tuple_T, T_in_F;
			equal_B_N = addition_class_initial_unique(B, T, F, N)(addition_class_F, tuple_T)(T_in_F);
			successor_N1 = successor(N)|N1|;
			N1_in_NATURALS = closure_naturals(N, N1)(N_in_NATURALS, successor_N1);
			tuple_T0 = tuple(ZERO, N1)|T0|;
			extract addition_classes_exist(N1)(N1_in_NATURALS)|F1|: addition_class_F1, F1_subset_C;
			T0_in_F1 = addition_class_initial_unique(N1, T0, F1, N1)(addition_class_F1, tuple_T0)(equal_sets_reflexive(N1));
			tuple_T1 = tuple(ONE, N)|T1|;
			prove T1_in_F1: ^ONE^N(is_tuple(ONE, N, T1) & ((equal_sets(ONE, ZERO) & equal_sets(N, N1)) | ^ZERO^N1^T0(is_successor(ZERO, ONE) & is_successor(N, N1) & is_tuple(ZERO, N1, T0) & T0 in F1))){
				choose ONE, N;
				prove condition: ^ZERO^N1^T0(is_successor(ZERO, ONE) & is_successor(N, N1) & is_tuple(ZERO, N1, T0) & T0 in F1){
					choose ZERO, N1, T0;
					return and(one_definition, successor_N1, tuple_T0, T0_in_F1);
				}
				return and(tuple_T1, or(<:equal_sets(ONE, ZERO) & equal_sets(N, N1)>, condition));
			}
			T1_in_F1 = expand(addition_class_F1)(T1)(T1_in_F1);
			tuple_T1 = equality_consistency[<Q: is_tuple(ONE, Q, T1)>](B, N)(equal_B_N)(tuple_T1);
			choose ONE, T1, N1, F1;
			return and(one_definition, successor_N1, addition_class_F1, tuple_T1, T1_in_F1);
		}
		ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);
		//Inductive step
		prove closure_R: *Y*Z(Y in R & is_successor(Y, Z) -> Z in R){
			given |Y, Y1|;
			implies Y_in_R, successor_Y1;
			Y1_not_ZERO = NATURAL_successor_nonzero(Y, Y1)(successor_Y1);
			extract R_def(Y)(Y_in_R): Y_in_NATURALS, Y_condition;
			successor_Y2 = successor(Y1)|Y2|;
			Y2_not_ZERO = NATURAL_successor_nonzero(Y1, Y2)(successor_Y2);
			Y1_in_NATURALS = closure_naturals(Y, Y1)(Y_in_NATURALS, successor_Y1);
			prove Y1_in_R: *B*T*F*N(N in NATURALS & is_addition_class(N, F) & is_tuple(Y1, B, T) & T in F -> ^Y2^T1^N1^F1(is_successor(Y1, Y2) & is_successor(N, N1) & is_addition_class(N1, F1) & is_tuple(Y2, B, T1) & T1 in F1)){
				given |B, T, F, N|;
				implies N_in_NATURALS, addition_class_F, tuple_T, T_in_F;
				extract expand(addition_class_F)(T)(T_in_F)|OTHER_Y1, OTHER_B|: other_tuple_T, either_T;
				extract tuple_equal_condition(Y1, B, OTHER_Y1, OTHER_B, T, T)(tuple_T, other_tuple_T, equal_sets_reflexive(T)): equal_Y1, equal_B;
				predecessor_exists_T = branch(either_T, equal_initial_T, predecessor_exists_T){
					extract equal_initial_T: equal_OTHER_Y1_ZERO, equal_OTHER_B_N;
					equal_Y1_ZERO = equality_consistency[<S: equal_sets(S, ZERO)>](Y1, OTHER_Y1)(equal_Y1)(equal_OTHER_Y1_ZERO);
					absurdity = Y1_not_ZERO(equal_Y1_ZERO);
					return axiom_absurdity[<:^Y^B1^T0(is_successor(Y, OTHER_Y1) & is_successor(OTHER_B, B1) & is_tuple(Y, B1, T0) & T0 in F)>](absurdity);
				} or {
					return predecessor_exists_T;
				};
				extract predecessor_exists_T|OTHER_Y, B1, T0|: successor_OTHER_Y1, successor_B1, tuple_T0, T0_in_F;
				successor_Y1_OTHER_Y = equality_consistency[<S: is_successor(OTHER_Y, S)>](Y1, OTHER_Y1)(equal_Y1)(successor_OTHER_Y1);
				equal_Y = predecessor_unique(Y, OTHER_Y, Y1)(successor_Y1, successor_Y1_OTHER_Y);
				tuple_T0 = equality_consistency[<S: is_tuple(S, B1, T0)>](Y, OTHER_Y)(equal_Y)(tuple_T0);
				existence_in_F1 = Y_condition(B1, T0, F, N)(N_in_NATURALS, addition_class_F, tuple_T0, T0_in_F);

				//I want to overwrite OTHER_Y1 because I no longer need the older "version" of this object
				//So I must overwrite the other statements which refer to this old object
				other_tuple_T = axiom_true;
				either_T = axiom_true;
				equal_Y1 = axiom_true;
				predecessor_exists_T = axiom_true;
				successor_OTHER_Y1 = axiom_true;

				extract existence_in_F1|OTHER_Y1, T1_PRED, N1, F1|: successor_OTHER_Y1, successor_N1, addition_class_F1, tuple_T1_PRED, T1_PRED_in_F1;
				equal_Y1 = successor_unique(Y, Y1, OTHER_Y1)(successor_Y1, successor_OTHER_Y1);
				successor_B1 = equality_consistency[<S: is_successor(S, B1)>](B, OTHER_B)(equal_B)(successor_B1);
				tuple_T1_PRED = equality_consistency[<S: is_tuple(S, B1, T1_PRED)>](Y1, OTHER_Y1)(equal_Y1)(tuple_T1_PRED);
				successor_Y2 = successor(Y1)|Y2|;
				tuple_T1 = tuple(Y2, B)|T1|;
				choose Y2, T1, N1, F1;
				prove condition: ^P^S^T(is_successor(P, Y2) & is_successor(B, S) & is_tuple(P, S, T) & T in F1){
					choose Y1, B1, T1_PRED;
					return and(successor_Y2, successor_B1, tuple_T1_PRED, T1_PRED_in_F1);
				}
				prove T1_in_F1: ^Y2^B(is_tuple(Y2, B, T1) & ((equal_sets(Y2, ZERO) & equal_sets(B, N1)) | ^P^S^T(is_successor(P, Y2) & is_successor(B, S) & is_tuple(P, S, T) & T in F1))){
					choose Y2, B;
					return and(tuple_T1, or(<:equal_sets(Y2, ZERO) & equal_sets(B, N1)>, condition));
				}
				T1_in_F1 = expand(addition_class_F1)(T1)(T1_in_F1);
				return and(successor_Y2, successor_N1, addition_class_F1, tuple_T1, T1_in_F1);
			}
			return R_def(Y1)(Y1_in_NATURALS, Y1_in_R);
		}
		NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure_R);
		given |A|;
		implies A_in_NATURALS;
		A_in_R = expand(NATURALS_subset_R)(A)(A_in_NATURALS);
		extract R_def(A)(A_in_R): A_in_NATURALS, result;

		return result;
	}

	//Now we prove that the addition classes "cover" the tuples of natural numbers
	prove addition_classes_cover: *A*B(A in NATURALS & B in NATURALS -> ^T^N^F(is_tuple(B, A, T) & N in NATURALS & is_addition_class(N, F) & T in F)){
		given |A, B|;
		implies A_in_NATURALS, B_in_NATURALS;
		R_def = axiom_specify[<S: ^T^N^F(is_tuple(S, A, T) & N in NATURALS & is_addition_class(N, F) & T in F)>](NATURALS)|R|;
		prove ZERO_in_R: ^T^N^F(is_tuple(ZERO, A, T) & N in NATURALS & is_addition_class(N, F) & T in F){
			tuple_T = tuple(ZERO, A)|T|;
			extract addition_classes_exist(A)(A_in_NATURALS)|F|: addition_class_F, F_subset_C;
			T_in_F = addition_class_initial_unique(A, T, F, A)(addition_class_F, tuple_T)(equal_sets_reflexive(A));
			choose T, A, F;
			return and(tuple_T, A_in_NATURALS, addition_class_F, T_in_F);
		}
		ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);
		prove closure_R: *Y*Y1(Y in R & is_successor(Y, Y1) -> Y1 in R){
			given |Y, Y1|;
			implies Y_in_R, successor_Y1;
			extract R_def(Y)(Y_in_R): Y_in_NATURALS, Y_condition;
			extract Y_condition|T, N, F|: tuple_T, N_in_NATURALS, addition_class_F, T_in_F;
			next_exists = addition_classes_cover_lemma(Y)(Y_in_NATURALS)(A, T, F, N)(N_in_NATURALS, addition_class_F, tuple_T, T_in_F);
			extract next_exists|OTHER_Y1, T1, N1, F1|: successor_OTHER_Y1, successor_N1, addition_class_F1, tuple_T1, T1_in_F1;
			equal_Y1 = successor_unique(Y, Y1, OTHER_Y1)(successor_Y1, successor_OTHER_Y1);
			tuple_T1 = equality_consistency[<S: is_tuple(S, A, T1)>](Y1, OTHER_Y1)(equal_Y1)(tuple_T1);
			N1_in_NATURALS = closure_naturals(N, N1)(N_in_NATURALS, successor_N1);
			Y1_in_NATURALS = closure_naturals(Y, Y1)(Y_in_NATURALS, successor_Y1);
			prove Y1_in_R: ^T1^N1^F1(is_tuple(Y1, A, T1) & N1 in NATURALS & is_addition_class(N1, F1) & T1 in F1){
				choose T1, N1, F1;
				return and(tuple_T1, N1_in_NATURALS, addition_class_F1, T1_in_F1);
			}
			return R_def(Y1)(Y1_in_NATURALS, Y1_in_R);
		}
		NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure_R);
		B_in_R = expand(NATURALS_subset_R)(B)(B_in_NATURALS);
		extract R_def(B)(B_in_R): B_in_NATURALS, result;
		
		return result;
	}

	//Here we prove that (A, B) can belong to at most one addition class
	prove addition_classes_unique: *A*B*N*M*FN*FM(A in NATURALS & B in NATURALS & is_addition_class(N, FN) & is_addition_class(M, FM) & ^T(is_tuple(A, B, T) & T in FN & T in FM) -> equal_sets(N, M)){
		R_def = axiom_specify[<S: *B*N*M*FN*FM(S in NATURALS & B in NATURALS & is_addition_class(N, FN) & is_addition_class(M, FM) & ^T(is_tuple(S, B, T) & T in FN & T in FM) -> equal_sets(N, M))>](NATURALS)|R|;
		prove ZERO_in_R: *B*N*M*FN*FM(ZERO in NATURALS & B in NATURALS & is_addition_class(N, FN) & is_addition_class(M, FM) & ^T(is_tuple(ZERO, B, T) & T in FN & T in FM) -> equal_sets(N, M)){
			given |B, N, M, FN, FM|;
			implies ZERO_in_NATURALS, B_in_NATURALS, addition_class_FN, addition_class_FM, T_exists;
			extract T_exists|T|: tuple_T, T_in_FN, T_in_FM;
			equal_B_N = addition_class_initial_unique(B, T, FN, N)(addition_class_FN, tuple_T)(T_in_FN);
			equal_B_M = addition_class_initial_unique(B, T, FM, M)(addition_class_FM, tuple_T)(T_in_FM);
			return equality_consistency[<S: equal_sets(S, M)>](B, N)(equal_B_N)(equal_B_M);
		}
		ZERO_in_R = R_def(ZERO)(zero_is_natural, ZERO_in_R);
		prove closure_R: *Y*Y1(Y in R & is_successor(Y, Y1) -> Y1 in R){
			given |Y, Y1|;
			implies Y_in_R, successor_Y1;
			extract R_def(Y)(Y_in_R): Y_in_NATURALS, Y_condition;
			Y1_in_NATURALS = closure_naturals(Y, Y1)(Y_in_NATURALS, successor_Y1);
			prove Y1_in_R: *B*N*M*FN*FM(Y1 in NATURALS & B in NATURALS & is_addition_class(N, FN) & is_addition_class(M, FM) & ^T(is_tuple(Y1, B, T) & T in FN & T in FM) -> equal_sets(N, M)){
				given |B, N, M, FN, FM|;
				implies Y1_in_NATURALS, B_in_NATURALS, addition_class_FN, addition_class_FM, T_exists;
				extract T_exists|T|: tuple_T, T_in_FN, T_in_FM;
				
				//First for FN
				extract expand(addition_class_FN)(T)(T_in_FN)|OTHER_Y1, OTHER_B|: other_tuple_T, either_T;
				extract tuple_equal_condition(Y1, B, OTHER_Y1, OTHER_B, T, T)(tuple_T, other_tuple_T, equal_sets_reflexive(T)): equal_Y1, equal_B;
				T_PRED_exists = branch(either_T, initial_T, T_PRED_exists){
					extract initial_T: equal_OTHER_Y1_ZERO, equal_B_N;
					equal_Y1_ZERO = equality_consistency[<S: equal_sets(S, ZERO)>](Y1, OTHER_Y1)(equal_Y1)(equal_OTHER_Y1_ZERO);
					not_equal_Y1_ZERO = NATURAL_successor_nonzero(Y, Y1)(successor_Y1);
					absurdity = not_equal_Y1_ZERO(equal_Y1_ZERO);
					return axiom_absurdity[<:^Y^B1^T1(is_successor(Y, OTHER_Y1) & is_successor(OTHER_B, B1) & is_tuple(Y, B1, T1) & T1 in FN)>](absurdity);
				} or {
					return T_PRED_exists;
				};
				extract T_PRED_exists|OTHER_Y, B1, T1|: other_successor_Y1, successor_B1, tuple_T1, T1_in_FN;
				other_successor_Y1 = equality_consistency[<S: is_successor(OTHER_Y, S)>](Y1, OTHER_Y1)(equal_Y1)(other_successor_Y1);
				equal_Y = predecessor_unique(Y, OTHER_Y, Y1)(successor_Y1, other_successor_Y1);
				tuple_T1 = equality_consistency[<S: is_tuple(S, B1, T1)>](Y, OTHER_Y)(equal_Y)(tuple_T1);
				successor_B1 = equality_consistency[<S: is_successor(S, B1)>](B, OTHER_B)(equal_B)(successor_B1);

				//Now the same for FM
				extract expand(addition_class_FM)(T)(T_in_FM)|M_OTHER_Y1, M_OTHER_B|: other_tuple_T, either_T;
				extract tuple_equal_condition(Y1, B, M_OTHER_Y1, M_OTHER_B, T, T)(tuple_T, other_tuple_T, equal_sets_reflexive(T)): equal_Y1, equal_B;
				T_PRED_exists = branch(either_T, initial_T, T_PRED_exists){
					extract initial_T: equal_M_OTHER_Y1_ZERO, equal_B_N;
					equal_Y1_ZERO = equality_consistency[<S: equal_sets(S, ZERO)>](Y1, M_OTHER_Y1)(equal_Y1)(equal_M_OTHER_Y1_ZERO);
					not_equal_Y1_ZERO = NATURAL_successor_nonzero(Y, Y1)(successor_Y1);
					absurdity = not_equal_Y1_ZERO(equal_Y1_ZERO);
					return axiom_absurdity[<:^Y^B1^T1(is_successor(Y, M_OTHER_Y1) & is_successor(M_OTHER_B, B1) & is_tuple(Y, B1, T1) & T1 in FM)>](absurdity);
				} or {
					return T_PRED_exists;
				};
				extract T_PRED_exists|M_OTHER_Y, M_B1, M_T1|: other_successor_Y1, M_successor_B1, tuple_M_T1, M_T1_in_FM;
				other_successor_Y1 = equality_consistency[<S: is_successor(M_OTHER_Y, S)>](Y1, M_OTHER_Y1)(equal_Y1)(other_successor_Y1);
				equal_Y = predecessor_unique(Y, M_OTHER_Y, Y1)(successor_Y1, other_successor_Y1);
				tuple_M_T1 = equality_consistency[<S: is_tuple(S, M_B1, M_T1)>](Y, M_OTHER_Y)(equal_Y)(tuple_M_T1);
				M_successor_B1 = equality_consistency[<S: is_successor(S, M_B1)>](B, M_OTHER_B)(equal_B)(M_successor_B1);

				B1_in_NATURALS = closure_naturals(B, B1)(B_in_NATURALS, successor_B1);
				equal_B1 = successor_unique(B, B1, M_B1)(successor_B1, M_successor_B1);
				tuple_M_T1 = equality_consistency[<S: is_tuple(Y, S, M_T1)>](B1, M_B1)(equal_B1)(tuple_M_T1);
				equal_T1 = tuple_unique(Y, B1, T1, M_T1)(tuple_T1, tuple_M_T1);
				T1_in_FM = equality_consistency[<S: S in FM>](T1, M_T1)(equal_T1)(M_T1_in_FM);

				prove condition: ^T1(is_tuple(Y, B1, T1) & T1 in FN & T1 in FM){
					choose T1;
					return and(tuple_T1, T1_in_FN, T1_in_FM);
				}
				return Y_condition(B1, N, M, FN, FM)(Y_in_NATURALS, B1_in_NATURALS, addition_class_FN, addition_class_FM, condition);
			}
			return R_def(Y1)(Y1_in_NATURALS, Y1_in_R);
		}
		NATURALS_subset_R = NATURALS_induction(R)(ZERO_in_R, closure_R);
		given |A, B, N, M, FN, FM|;
		implies premises;
		extract premises: A_in_NATURALS, rest_of_premises;
		A_in_R = expand(NATURALS_subset_R)(A)(A_in_NATURALS);
		extract R_def(A)(A_in_R): A_in_NATURALS, A_result;
		return A_result(B, N, M, FN, FM)(premises);
	}

	//FINALLY! IT'S TIME TO CONSTRUCT THE ADDITION FUNCTION!
	//Here it is!
	addition_function_definition = relation_existence_lemma[<T, Y: ^F(is_addition_class(Y, F) & T in F)>](C, NATURALS)|ADDITION_FUNCTION|;
	choose ADDITION_FUNCTION;

	//We must first prove that this is indeed a function
	prove ADDITION_FUNCTION_is_function: *X*Y*Z(are_related(X, Y, ADDITION_FUNCTION) & are_related(X, Z, ADDITION_FUNCTION) -> equal_sets(Y, Z)){
		given |X, Y, Z|;
		implies related_XY, related_XZ;

		extract addition_function_definition(X, Y)(related_XY): X_in_C, Y_in_NATURALS, F0_exists;
		extract F0_exists|F0|: addition_class_F0, X_in_F0;

		extract addition_function_definition(X, Z)(related_XZ): X_in_C, Z_in_NATURALS, F1_exists;
		extract F1_exists|F1|: addition_class_F1, X_in_F1;

		extract C_def(X)(X_in_C)|X0, X1|: X0_in_NATURALS, X1_in_NATURALS, tuple_X;
		prove condition: ^X(is_tuple(X0, X1, X) & X in F0 & X in F1){
			choose X;
			return and(tuple_X, X_in_F0, X_in_F1);
		}

		return addition_classes_unique(X0, X1, Y, Z, F0, F1)(X0_in_NATURALS, X1_in_NATURALS, addition_class_F0, addition_class_F1, condition);
	}

	ADDITION_FUNCTION_is_function = #is_function(ADDITION_FUNCTION)(ADDITION_FUNCTION_is_function);

	prove domain_C: *X(X in C -> ^Y(are_related(X, Y, ADDITION_FUNCTION))){
		given |X|;
		implies X_in_C;
		extract C_def(X)(X_in_C)|X0, X1|: X0_in_NATURALS, X1_in_NATURALS, tuple_X;
		extract addition_classes_cover(X1, X0)(X1_in_NATURALS, X0_in_NATURALS)|OTHER_X, Y, F|: tuple_OTHER_X, Y_in_NATURALS, addition_class_F, OTHER_X_in_F;
		choose Y;
		equal_X = tuple_unique(X0, X1, X, OTHER_X)(tuple_X, tuple_OTHER_X);
		X_in_F = equality_consistency[<S: S in F>](X, OTHER_X)(equal_X)(OTHER_X_in_F);
		prove related_XY: ^F(is_addition_class(Y, F) & X in F){
			choose F;
			return and(addition_class_F, X_in_F);
		}
		return addition_function_definition(X, Y)(X_in_C, Y_in_NATURALS, related_XY);
	}

	domain_C = #is_domain(ADDITION_FUNCTION, C)(domain_C);

	prove domain_exists: ^T(is_cross_product(NATURALS, NATURALS, T) & is_domain(ADDITION_FUNCTION, T)){
		choose C;
		return and(C_cross_product, domain_C);
	}

	prove codomain_NATURALS: *X*Y(are_related(X, Y, ADDITION_FUNCTION) -> Y in NATURALS){
		given |X, Y|;
		implies related_XY;
		extract addition_function_definition(X, Y)(related_XY): X_in_C, Y_in_NATURALS, addition_class_exists;
		return Y_in_NATURALS;
	}

	codomain_NATURALS = #is_codomain(ADDITION_FUNCTION, NATURALS)(codomain_NATURALS);

	prove zero_identity: *X*Z(X in NATURALS & is_tuple(ZERO, X, Z) -> are_related(Z, X, ADDITION_FUNCTION)){
		given |X, Z|;
		implies X_in_NATURALS, tuple_Z;
		extract addition_classes_exist(X)(X_in_NATURALS)|F|: addition_class_F, F_subset_C;
		Z_in_F = addition_class_initial_unique(X, Z, F, X)(addition_class_F, tuple_Z)(equal_sets_reflexive(X));
		prove related_ZX: ^F(is_addition_class(X, F) & Z in F){
			choose F;
			return and(addition_class_F, Z_in_F);
		}
		Z_in_C = expand(F_subset_C)(Z)(Z_in_F);
		return addition_function_definition(Z, X)(Z_in_C, X_in_NATURALS, related_ZX);
	}

	prove successor_recursion: *X*Y*T0*Z0(is_tuple(X, Y, T0) & are_related(T0, Z0, ADDITION_FUNCTION) -> ^SX^T1^Z1(is_successor(X, SX) & is_tuple(SX, Y, T1) & are_related(T1, Z1, ADDITION_FUNCTION) & is_successor(Z0, Z1))){
		given |X, Y, T0, Z0|;
		implies tuple_T0, related_T0Z0;
		extract addition_function_definition(T0, Z0)(related_T0Z0): T0_in_C, Z0_in_NATURALS, addition_class_exists;
		extract addition_class_exists|F0|: addition_class_F0, T0_in_F0;
		extract C_def(T0)(T0_in_C)|OTHER_X, OTHER_Y|: OTHER_X_in_NATURALS, OTHER_Y_in_NATURALS, other_tuple_T0;
		extract tuple_equal_condition(X, Y, OTHER_X, OTHER_Y, T0, T0)(tuple_T0, other_tuple_T0, equal_sets_reflexive(T0)): equal_X, equal_Y;
		X_in_NATURALS = equality_consistency[<S: S in NATURALS>](X, OTHER_X)(equal_X)(OTHER_X_in_NATURALS);
		Y_in_NATURALS = equality_consistency[<S: S in NATURALS>](Y, OTHER_Y)(equal_Y)(OTHER_Y_in_NATURALS);
		extract addition_classes_cover_lemma(X)(X_in_NATURALS)(Y, T0, F0, Z0)(Z0_in_NATURALS, addition_class_F0, tuple_T0, T0_in_F0)|SX, T1, Z1, F1|: successor_SX, successor_Z1, addition_class_F1, tuple_T1, T1_in_F1;
		choose SX, T1, Z1;
		SX_in_NATURALS = closure_naturals(X, SX)(X_in_NATURALS, successor_SX);
		prove T1_in_C: ^SX^Y(SX in NATURALS & Y in NATURALS & is_tuple(SX, Y, T1)){
			choose SX, Y;
			return and(SX_in_NATURALS, Y_in_NATURALS, tuple_T1);
		}
		T1_in_C = C_def(T1)(T1_in_C);
		Z1_in_NATURALS = closure_naturals(Z0, Z1)(Z0_in_NATURALS, successor_Z1);
		prove addition_class_exists: ^F1(is_addition_class(Z1, F1) & T1 in F1){
			choose F1;
			return and(addition_class_F1, T1_in_F1);
		}
		related_T1Z1 = addition_function_definition(T1, Z1)(T1_in_C, Z1_in_NATURALS, addition_class_exists);
		return and(successor_SX, tuple_T1, related_T1Z1, successor_Z1);
	}

	//Holy shit!
	return #is_addition_function(ADDITION_FUNCTION)(ADDITION_FUNCTION_is_function, domain_exists, codomain_NATURALS, zero_identity, successor_recursion);
}

naturals_addition_function_definition = addition_function_exists|NATURALS_ADDITION_FUNCTION|;

define is_natural_sum(X, Y, Z): X in NATURALS & Y in NATURALS & ^T(is_tuple(X, Y, T) & are_related(T, Z, NATURALS_ADDITION_FUNCTION));

prove natural_sum_zero_identity: *X(X in NATURALS -> is_natural_sum(ZERO, X, X)){
	given |X|;
	implies X_in_NATURALS;
	extract expand(naturals_addition_function_definition): is_function, domain_exists, codomain_NATURALS, zero_identity, successor_recursion;
	extract domain_exists|C|: cross_product_C, domain_C;
	tuple_T = tuple(ZERO, X)|T|;
	prove T_in_C: ^ZERO^X(ZERO in NATURALS & X in NATURALS & is_tuple(ZERO, X, T)){
		choose ZERO, X;
		return and(zero_is_natural, X_in_NATURALS, tuple_T);
	}
	T_in_C = expand(cross_product_C)(T)(T_in_C);
	related_TX = zero_identity(X, T)(X_in_NATURALS, tuple_T);
	prove natural_sum: ^T(is_tuple(ZERO, X, T) & are_related(T, X, NATURALS_ADDITION_FUNCTION)){
		choose T;
		return and(tuple_T, related_TX);
	}
	return #is_natural_sum(ZERO, X, X)(zero_is_natural, X_in_NATURALS, natural_sum);
}

prove natural_sum_successor_recursion: *X*Y*Z(is_natural_sum(X, Y, Z) -> ^X1^Z1(is_successor(X, X1) & is_successor(Z, Z1) & is_natural_sum(X1, Y, Z1))){
	given |X, Y, Z|;
	implies Z_natural_sum;
	extract expand(NATURALS_inductive): empty_in_naturals, closure_naturals;
	extract expand(Z_natural_sum): X_in_NATURALS, Y_in_NATURALS, T_exists;
	extract T_exists|T|: tuple_T, related_TZ;
	extract expand(naturals_addition_function_definition): is_function, domain_exists, codomain_NATURALS, zero_identity, successor_recursion;
	extract successor_recursion(X, Y, T, Z)(tuple_T, related_TZ)|X1, T1, Z1|: successor_X1, tuple_T1, related_T1Z1, successor_Z1;
	choose X1, Z1;
	prove natural_sum: ^T1(is_tuple(X1, Y, T1) & are_related(T1, Z1, NATURALS_ADDITION_FUNCTION)){
		choose T1;
		return and(tuple_T1, related_T1Z1);
	}
	X1_in_NATURALS = closure_naturals(X, X1)(X_in_NATURALS, successor_X1);
	natural_sum = #is_natural_sum(X1, Y, Z1)(X1_in_NATURALS, Y_in_NATURALS, natural_sum);
	return and(successor_X1, successor_Z1, natural_sum);
}

//TIME TO PROVE THAT 2+2=4
prove TWO_plus_TWO_is_FOUR: is_natural_sum(TWO, TWO, FOUR){
	ZERO_plus_TWO = natural_sum_zero_identity(TWO)(two_is_natural);
	exists = natural_sum_successor_recursion(ZERO, TWO, TWO)(ZERO_plus_TWO);
	extract exists|OTHER_ONE, OTHER_THREE|: successor_OTHER_ONE, successor_OTHER_THREE, natural_sum;
	equal_ONE = successor_unique(ZERO, ONE, OTHER_ONE)(one_definition, successor_OTHER_ONE);
	equal_THREE = successor_unique(TWO, THREE, OTHER_THREE)(three_definition, successor_OTHER_THREE);
	natural_sum = equality_consistency[<S: is_natural_sum(OTHER_ONE, TWO, S)>](THREE, OTHER_THREE)(equal_THREE)(natural_sum);
	natural_sum = equality_consistency[<S: is_natural_sum(S, TWO, THREE)>](ONE, OTHER_ONE)(equal_ONE)(natural_sum);

	exists = natural_sum_successor_recursion(ONE, TWO, THREE)(natural_sum);
	extract exists|OTHER_TWO, OTHER_FOUR|: successor_OTHER_TWO, successor_OTHER_FOUR, natural_sum;
	equal_TWO = successor_unique(ONE, TWO, OTHER_TWO)(two_definition, successor_OTHER_TWO);
	equal_FOUR = successor_unique(THREE, FOUR, OTHER_FOUR)(four_definition, successor_OTHER_FOUR);
	natural_sum = equality_consistency[<S: is_natural_sum(OTHER_TWO, TWO, S)>](FOUR, OTHER_FOUR)(equal_FOUR)(natural_sum);
	return equality_consistency[<S: is_natural_sum(S, TWO, FOUR)>](TWO, OTHER_TWO)(equal_TWO)(natural_sum);
}


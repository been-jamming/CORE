//Next we prove that the integers exist!
//We construct them as equivalence classes of pairs of natural numbers
//(A, B) is the representative for A - B

NATURALS_X_NATURALS_definition = cross_product(NATURALS, NATURALS)|NATURALS_X_NATURALS|;

prove integer_def_relation_exists: ^R*T0*T1(are_related(T0, T1, R) <-> T0 in NATURALS_X_NATURALS & T1 in NATURALS_X_NATURALS & *X0*Y0*X1*Y1(is_tuple(X0, Y0, T0) & is_tuple(X1, Y1, T1) -> ^S(is_natural_sum(X0, Y1, S) & is_natural_sum(X1, Y0, S)))){
	R_def = relation_existence_lemma[<T0, T1: *X0*Y0*X1*Y1(is_tuple(X0, Y0, T0) & is_tuple(X1, Y1, T1) -> ^S(is_natural_sum(X0, Y1, S) & is_natural_sum(X1, Y0, S)))>](NATURALS_X_NATURALS, NATURALS_X_NATURALS)|R|;
	choose R;
	given |T0, T1|;
	return R_def(T0, T1);
}

integer_def_relation_def = integer_def_relation_exists|INTEGER_DEFINITION_RELATION|;

prove integer_def_relation_reflexive: *T(T in NATURALS_X_NATURALS -> are_related(T, T, INTEGER_DEFINITION_RELATION)){
	given |T|;
	implies T_in_NATURALS_X_NATURALS;
	prove related_condition: *X0*Y0*X1*Y1(is_tuple(X0, Y0, T) & is_tuple(X1, Y1, T) -> ^S(is_natural_sum(X0, Y1, S) & is_natural_sum(X1, Y0, S))){
		given |X0, Y0, X1, Y1|;
		implies tuple0, tuple1;
		equal_X, equal_Y = tuple_equal_condition(X0, Y0, X1, Y1, T, T)(tuple0, tuple1, equal_sets_reflexive(T));
		X_in_NATURALS, Y_in_NATURALS, tuple_T = expand(NATURALS_X_NATURALS_definition)(T)(T_in_NATURALS_X_NATURALS)|X, Y|;
		equal_X0, equal_Y0 = tuple_equal_condition(X0, Y0, X, Y, T, T)(tuple0, tuple_T, equal_sets_reflexive(T));
		X0_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](X0, X)(equal_X0)(X_in_NATURALS);
		equal_X1, equal_Y1 = tuple_equal_condition(X1, Y1, X, Y, T, T)(tuple1, tuple_T, equal_sets_reflexive(T));
		Y1_in_NATURALS = equality_consistency[<Q: Q in NATURALS>](Y1, Y)(equal_Y1)(Y_in_NATURALS);
		S_in_NATURALS, sum_S = natural_sum(X0, Y1)(X0_in_NATURALS, Y1_in_NATURALS)|S|;
		choose S;
		other_sum_S = equality_consistency[<Q: is_natural_sum(Q, Y1, S)>](X0, X1)(equal_X)(sum_S);
		other_sum_S = equality_consistency[<Q: is_natural_sum(X1, Q, S)>](Y0, Y1)(equal_Y)(other_sum_S);
		return sum_S, other_sum_S;
	}
	return integer_def_relation_def(T, T)(T_in_NATURALS_X_NATURALS, T_in_NATURALS_X_NATURALS, related_condition);
}

integer_def_relation_reflexive = #is_reflexive(INTEGER_DEFINITION_RELATION, NATURALS_X_NATURALS)(integer_def_relation_reflexive);

prove integer_def_relation_symmetric: *S*T(are_related(S, T, INTEGER_DEFINITION_RELATION) -> are_related(T, S, INTEGER_DEFINITION_RELATION)){
	given |S, T|;
	implies related_ST;
	S_in_NATURALS_X_NATURALS, T_in_NATURALS_X_NATURALS, condition_ST = integer_def_relation_def(S, T)(related_ST);
	prove condition_TS: *X0*Y0*X1*Y1(is_tuple(X0, Y0, T) & is_tuple(X1, Y1, S) -> ^SUM(is_natural_sum(X0, Y1, SUM) & is_natural_sum(X1, Y0, SUM))){
		given |X0, Y0, X1, Y1|;
		implies tuple_T, tuple_S;
		sum1, sum0 = condition_ST(X1, Y1, X0, Y0)(tuple_S, tuple_T)|SUM|;
		choose SUM;
		return sum0, sum1;
	}
	return integer_def_relation_def(T, S)(T_in_NATURALS_X_NATURALS, S_in_NATURALS_X_NATURALS, condition_TS);
}

integer_def_relation_symmetric = #is_symmetric(INTEGER_DEFINITION_RELATION)(integer_def_relation_symmetric);

prove integer_def_relation_transitive: *R*S*T(are_related(R, S, INTEGER_DEFINITION_RELATION) & are_related(S, T, INTEGER_DEFINITION_RELATION) -> are_related(R, T, INTEGER_DEFINITION_RELATION)){
	given |R, S, T|;
	implies related_RS, related_ST;
	R_in_NATURALS_X_NATURALS, S_in_NATURALS_X_NATURALS, condition_RS = integer_def_relation_def(R, S)(related_RS);
	S_in_NATURALS_X_NATURALS, T_in_NATURALS_X_NATURALS, condition_ST = integer_def_relation_def(S, T)(related_ST);
	prove condition_RT: *A*B*E*F(is_tuple(A, B, R) & is_tuple(E, F, T) -> ^SUM(is_natural_sum(A, F, SUM) & is_natural_sum(E, B, SUM))){
		given |A, B, E, F|;
		implies tuple_R, tuple_T;
		C_in_NATURALS, D_in_NATURALS, tuple_S = expand(NATURALS_X_NATURALS_definition)(S)(S_in_NATURALS_X_NATURALS)|C, D|;
		sum_AD, sum_CB = condition_RS(A, B, C, D)(tuple_R, tuple_S)|SUM_AD_CB|;
		sum_CF, sum_ED = condition_ST(C, D, E, F)(tuple_S, tuple_T)|SUM_CF_ED|;
		sum_BC = natural_sum_commutative(C, B, SUM_AD_CB)(sum_CB);
		sum_DE = natural_sum_commutative(E, D, SUM_CF_ED)(sum_ED);
		A_in_NATURALS, D_in_NATURALS, tuple_exists = expand(sum_AD);
		C_in_NATURALS, F_in_NATURALS, tuple_exists = expand(sum_CF);
		C_in_NATURALS, B_in_NATURALS, tuple_exists = expand(sum_CB);
		E_in_NATURALS, D_in_NATURALS, tuple_exists = expand(sum_ED);
		SUM_AD_CB_in_NATURALS = natural_sum_is_natural(A, D, SUM_AD_CB)(sum_AD);
		SUM_CF_ED_in_NATURALS = natural_sum_is_natural(C, F, SUM_CF_ED)(sum_CF);
		NEW_SUM_in_NATURALS, sum_NEW_SUM = natural_sum(SUM_AD_CB, SUM_CF_ED)(SUM_AD_CB_in_NATURALS, SUM_CF_ED_in_NATURALS)|NEW_SUM|;

		SUM_D_CF_in_NATURALS, sum_D_CF = natural_sum(D, SUM_CF_ED)(D_in_NATURALS, SUM_CF_ED_in_NATURALS)|SUM_D_CF|;
		SUM_DC_in_NATURALS, sum_DC = natural_sum(D, C)(D_in_NATURALS, C_in_NATURALS)|SUM_DC|;
		SUM_AF_in_NATURALS, sum_AF = natural_sum(A, F)(A_in_NATURALS, F_in_NATURALS)|SUM_AF|;
		choose SUM_AF;
		sum_A_D_CF = natural_sum_associative(A, D, SUM_CF_ED, NEW_SUM, SUM_AD_CB, SUM_D_CF)(sum_AD, sum_NEW_SUM, sum_D_CF);
		sum_DC_F = natural_sum_associative2(D, C, F, SUM_D_CF, SUM_DC, SUM_CF_ED)(sum_CF, sum_D_CF, sum_DC);
		sum_F_DC = natural_sum_commutative(SUM_DC, F, SUM_D_CF)(sum_DC_F);
		sum_AF_DC = natural_sum_associative2(A, F, SUM_DC, NEW_SUM, SUM_AF, SUM_D_CF)(sum_F_DC, sum_A_D_CF, sum_AF);

		SUM_C_ED_in_NATURALS, sum_C_ED = natural_sum(C, SUM_CF_ED)(C_in_NATURALS, SUM_CF_ED_in_NATURALS)|SUM_C_ED|;
		SUM_CD_in_NATURALS, sum_CD = natural_sum(C, D)(C_in_NATURALS, D_in_NATURALS)|SUM_CD|;
		SUM_BE_in_NATURALS, sum_BE = natural_sum(B, E)(B_in_NATURALS, E_in_NATURALS)|SUM_BE|;
		sum_B_C_ED = natural_sum_associative(B, C, SUM_CF_ED, NEW_SUM, SUM_AD_CB, SUM_C_ED)(sum_BC, sum_NEW_SUM, sum_C_ED);
		sum_CD_E = natural_sum_associative2(C, D, E, SUM_C_ED, SUM_CD, SUM_CF_ED)(sum_DE, sum_C_ED, sum_CD);
		sum_E_CD = natural_sum_commutative(SUM_CD, E, SUM_C_ED)(sum_CD_E);
		sum_BE_CD = natural_sum_associative2(B, E, SUM_CD, NEW_SUM, SUM_BE, SUM_C_ED)(sum_E_CD, sum_B_C_ED, sum_BE);

		other_sum_DC = natural_sum_commutative(C, D, SUM_CD)(sum_CD);
		equal_DC = natural_sum_unique(D, C, SUM_DC, SUM_CD)(sum_DC, other_sum_DC);
		sum_BE_DC = equality_consistency[<Q: is_natural_sum(SUM_BE, Q, NEW_SUM)>](SUM_DC, SUM_CD)(equal_DC)(sum_BE_CD);
		
		sum_DC_AF = natural_sum_commutative(SUM_AF, SUM_DC, NEW_SUM)(sum_AF_DC);
		sum_DC_BE = natural_sum_commutative(SUM_BE, SUM_DC, NEW_SUM)(sum_BE_DC);

		equal_AF_BE = natural_sum_cancellation(SUM_DC, SUM_AF, SUM_BE, NEW_SUM)(sum_DC_AF, sum_DC_BE);
		sum_EB = natural_sum_commutative(B, E, SUM_BE)(sum_BE);
		sum_EB = equality_consistency[<Q: is_natural_sum(E, B, Q)>](SUM_AF, SUM_BE)(equal_AF_BE)(sum_EB);

		return sum_AF, sum_EB;
	}
	
	return integer_def_relation_def(R, T)(R_in_NATURALS_X_NATURALS, T_in_NATURALS_X_NATURALS, condition_RT);
}

integer_def_relation_transitive = #is_transitive(INTEGER_DEFINITION_RELATION)(integer_def_relation_transitive);

//And we've proven that the integer definition relation is an equivalence relation
integer_def_relation_equivalence = #is_equivalence_relation(INTEGER_DEFINITION_RELATION, NATURALS_X_NATURALS)(integer_def_relation_reflexive, integer_def_relation_symmetric, integer_def_relation_transitive);

//WE DEFINE THE INTEGERS
integers_definition = equivalence_classes(NATURALS_X_NATURALS, INTEGER_DEFINITION_RELATION)(integer_def_relation_equivalence)|INTEGERS|;

//We need a better definition of when a pair of natural numbers represents an integer for convenience
define is_integer_representation(A, B, I): *T(is_tuple(A, B, T) -> T in I);

//Next we prove that any two naturals A and B represent an integer
prove integer_representation: *A*B(A in NATURALS & B in NATURALS -> ^I(I in INTEGERS & is_integer_representation(A, B, I))){
	given |A, B|;
	implies A_in_NATURALS, B_in_NATURALS;

	tuples_represent = equivalence_classes_class(NATURALS_X_NATURALS, INTEGER_DEFINITION_RELATION, INTEGERS)(integer_def_relation_equivalence, integers_definition);
	tuple_T = tuple(A, B)|T|;
	prove T_in_NATURALS_X_NATURALS: ^A^B(A in NATURALS & B in NATURALS & is_tuple(A, B, T)){
		choose A, B;
		return A_in_NATURALS, B_in_NATURALS, tuple_T;
	}
	T_in_NATURALS_X_NATURALS = expand(NATURALS_X_NATURALS_definition)(T)(T_in_NATURALS_X_NATURALS);
	I_in_INTEGERS, T_in_I = tuples_represent(T)(T_in_NATURALS_X_NATURALS)|I|;

	choose I;

	prove A_B_represent: *Q(is_tuple(A, B, Q) -> Q in I){
		given |Q|;
		implies tuple_Q;
		Q_equal_T = tuple_unique(A, B, Q, T)(tuple_Q, tuple_T);
		return equality_consistency[<W: W in I>](Q, T)(Q_equal_T)(T_in_I);
	}
	A_B_represent = #is_integer_representation(A, B, I)(A_B_represent);

	return I_in_INTEGERS, A_B_represent;
}

//Now we prove that integer representations exist for every integer
prove integer_representation_exists: *I(I in INTEGERS -> ^A^B(A in NATURALS & B in NATURALS & is_integer_representation(A, B, I))){
	given |I|;
	implies I_in_INTEGERS;

	//The definition of an equivalence class implies that all equivalence classes are non-empty
	//How convenient!
	I_equiv_class = expand(integers_definition)(I)(I_in_INTEGERS);
	T_in_NATURALS_X_NATURALS, T_condition = expand(I_equiv_class)|T|;
	T_related_T = expand(integer_def_relation_reflexive)(T)(T_in_NATURALS_X_NATURALS);
	T_in_I = T_condition(T)(T_in_NATURALS_X_NATURALS, T_related_T);
	A_in_NATURALS, B_in_NATURALS, tuple_T = expand(NATURALS_X_NATURALS_definition)(T)(T_in_NATURALS_X_NATURALS)|A, B|;

	choose A, B;

	prove A_B_represent: *Q(is_tuple(A, B, Q) -> Q in I){
		given |Q|;
		implies tuple_Q;
		Q_equal_T = tuple_unique(A, B, Q, T)(tuple_Q, tuple_T);
		return equality_consistency[<W: W in I>](Q, T)(Q_equal_T)(T_in_I);
	}
	A_B_represent = #is_integer_representation(A, B, I)(A_B_represent);

	return A_in_NATURALS, B_in_NATURALS, A_B_represent;
}

//To fully bootstrap everything into the new definition of an integer representation,
//we need to have a statement which characterizes the definition with respect to the
//naturals which represent the integer
prove integer_representation_def: *A*B*C*D*I*J(I in INTEGERS & J in INTEGERS & is_integer_representation(A, B, I) & is_integer_representation(C, D, J) -> (equal_sets(I, J) <-> ^S(is_natural_sum(A, D, S) & is_natural_sum(C, B, S)))){
	given |A, B, C, D, I, J|;
	implies I_in_integers, J_in_integers, A_B_represent, C_D_represent;

	prove lemma0: equal_sets(I, J) -> ^S(is_natural_sum(A, D, S) & is_natural_sum(C, B, S)){
		implies I_equals_J;
		tuple_TAB = tuple(A, B)|TAB|;
		tuple_TCD = tuple(C, D)|TCD|;
		C_D_represent = equality_consistency[<W: is_integer_representation(C, D, W)>](I, J)(I_equals_J)(C_D_represent);
		TAB_in_I = expand(A_B_represent)(TAB)(tuple_TAB);
		TCD_in_I = expand(C_D_represent)(TCD)(tuple_TCD);
		REP_in_NATURALS_X_NATURALS, REP_condition = expand(expand(integers_definition)(I)(I_in_integers))|REP|;
		TAB_in_NATURALS_X_NATURALS, REP_related_TAB = REP_condition(TAB)(TAB_in_I);
		TCD_in_NATURALS_X_NATURALS, REP_related_TCD = REP_condition(TCD)(TCD_in_I);
		TAB_related_REP = expand(integer_def_relation_symmetric)(REP, TAB)(REP_related_TAB);
		TAB_related_TCD = expand(integer_def_relation_transitive)(TAB, REP, TCD)(TAB_related_REP, REP_related_TCD);
		TAB_in_NATURALS_X_NATURALS, TCD_in_NATURALS_X_NATURALS, condition = integer_def_relation_def(TAB, TCD)(TAB_related_TCD);
		return condition(A, B, C, D)(tuple_TAB, tuple_TCD);
	}

	prove lemma1: ^S(is_natural_sum(A, D, S) & is_natural_sum(C, B, S)) -> equal_sets(I, J){
		implies S_exists;

		sum_AD, sum_CB = S_exists|S|;
		A_in_NATURALS, D_in_NATURALS, tuple_condition = expand(sum_AD);
		C_in_NATURALS, B_in_NATURALS, tuple_condition = expand(sum_CB);
		tuple_T0 = tuple(A, B)|T0|;
		tuple_T1 = tuple(C, D)|T1|;

		T0_in_I = expand(A_B_represent)(T0)(tuple_T0);
		T1_in_J = expand(C_D_represent)(T1)(tuple_T1);

		REP_I_in_NATURALS_X_NATURALS, REP_I_condition = expand(expand(integers_definition)(I)(I_in_integers))|REP_I|;
		T0_in_NATURALS_X_NATURALS, REP_I_related_T0 = REP_I_condition(T0)(T0_in_I);

		REP_J_in_NATURALS_X_NATURALS, REP_J_condition = expand(expand(integers_definition)(J)(J_in_integers))|REP_J|;
		T1_in_NATURALS_X_NATURALS, REP_J_related_T1 = REP_J_condition(T1)(T1_in_J);

		prove T0_related_T1: *U*V*W*X(is_tuple(U, V, T0) & is_tuple(W, X, T1) -> ^S(is_natural_sum(U, X, S) & is_natural_sum(W, V, S))){
			given |U, V, W, X|;
			implies other_tuple_T0, other_tuple_T1;

			A_equal_U, B_equal_V = tuple_equal_condition(A, B, U, V, T0, T0)(tuple_T0, other_tuple_T0, equal_sets_reflexive(T0));
			C_equal_W, D_equal_X = tuple_equal_condition(C, D, W, X, T1, T1)(tuple_T1, other_tuple_T1, equal_sets_reflexive(T1));
			
			sum_UD = equality_consistency[<Y: is_natural_sum(Y, D, S)>](A, U)(A_equal_U)(sum_AD);
			sum_UX = equality_consistency[<Y: is_natural_sum(U, Y, S)>](D, X)(D_equal_X)(sum_UD);

			sum_WB = equality_consistency[<Y: is_natural_sum(Y, B, S)>](C, W)(C_equal_W)(sum_CB);
			sum_WV = equality_consistency[<Y: is_natural_sum(W, Y, S)>](B, V)(B_equal_V)(sum_WB);

			choose S;
			return sum_UX, sum_WV;
		}

		T0_related_T1 = integer_def_relation_def(T0, T1)(T0_in_NATURALS_X_NATURALS, T1_in_NATURALS_X_NATURALS, T0_related_T1);
		REP_I_related_T1 = expand(integer_def_relation_transitive)(REP_I, T0, T1)(REP_I_related_T0, T0_related_T1);
		T1_in_I = REP_I_condition(T1)(T1_in_NATURALS_X_NATURALS, REP_I_related_T1);

		prove not_disjoint: ^T1(T1 in I & T1 in J){
			choose T1;
			return T1_in_I, T1_in_J;
		}

		return equivalence_classes_disjoint(NATURALS_X_NATURALS, INTEGER_DEFINITION_RELATION, INTEGERS)(integer_def_relation_equivalence, integers_definition)(I, J)(I_in_integers, J_in_integers, not_disjoint);
	}

	return iff(lemma0, lemma1);
}

//Defining the sum of two integers I and J
define is_sum(I, J, K): I in INTEGERS & J in INTEGERS & K in INTEGERS & *A*B*C*D*S0*S1(is_natural_sum(A, C, S0) & is_natural_sum(B, D, S1) & is_integer_representation(A, B, I) & is_integer_representation(C, D, J) -> is_integer_representation(S0, S1, K));

//Now we must prove that the sum of two integers exists
//prove sum: *I*J(I in INTEGERS & J in INTEGERS -> ^K(K in INTEGERS & is_sum(I, J, K))){
//	given |I, J|;
//	implies I_in_INTEGERS, J_in_INTEGERS;
//
//	I0_in_NATURALS, I1_in_NATURALS, I_rep = integer_representation_exists(I)(I_in_INTEGERS)|I0, I1|;
//	J0_in_NATURALS, J1_in_NATURALS, J_rep = integer_representation_exists(J)(J_in_INTEGERS)|J0, J1|;
//
//	K0_in_NATURALS, sum_K0 = natural_sum(I0, J0)(I0_in_NATURALS, J0_in_NATURALS)|K0|;
//	K1_in_NATURALS, sum_K1 = natural_sum(I1, J1)(I1_in_NATURALS, J1_in_NATURALS)|K1|;
//
//	K_in_INTEGERS, K_rep = integer_representation(K0, K1)(K0_in_NATURALS, K1_in_NATURALS)|K|;
//
//	choose K;
//
//	tuple_TI = tuple(I0, I1)|TI|;
//	tuple_TJ = tuple(J0, J1)|TJ|;
//
//	TI_in_I = expand(I_rep)(TI)(tuple_TI);
//	TJ_in_I = expand(J_rep)(TJ)(tuple_TJ);
//
//	prove sum_K: *A*B*C*D*S0*S1(is_natural_sum(A, C, S0) & is_natural_sum(B, D, S1) & is_integer_representation(A, B, I) & is_integer_representation(C, D, J) -> is_integer_representation(S0, S1, K)){
//		given |A, B, C, D, S0, S1|;
//		implies sum_S0, sum_S1, AB_rep_I, CD_rep_J;
//		A_in_NATURALS, C_in_NATURALS, tuple_exists = expand(sum_S0);
//		B_in_NATURALS, D_in_NATURALS, tuple_exists = expand(sum_S1);
//
//		tuple_TAB = tuple(A, B)|TAB|;
//		tuple_TCD = tuple(C, D)|TCD|;
//
//		TAB_in_I = expand(AB_rep_I)(TAB)(tuple_TAB);
//		TCD_in_J = expand(CD_rep_J)(TCD)(tuple_TCD);
//
//		I_REP_in_NATURALS_X_NATURALS, I_REP_represent = expand(expand(integers_definition)(I)(I_in_INTEGERS))|I_REP|;
//		J_REP_in_NATURALS_X_NATURALS, J_REP_represent = expand(expand(integers_definition)(J)(J_in_INTEGERS))|J_REP|;
//
//		I_REP0_in_NATURALS, I_REP1_in_NATURALS, tuple_I_REP = expand(NATURALS_X_NATURALS_definition)(I_REP)(I_REP_in_NATURALS_X_NATURALS)|I_REP0, I_REP1|;
//		J_REP0_in_NATURALS, J_REP1_in_NATURALS, tuple_J_REP = expand(NATURALS_X_NATURALS_definition)(J_REP)(J_REP_in_NATURALS_X_NATURALS)|J_REP0, J_REP1|;
//
//		print I_REP_represent;
//	}
//}
//

//A few logical axioms first
axiom axiom_absurdity[P]: false -> P;
axiom axiom_true: true;
axiom axiom_excluded_middle[P]: P | ~P;

//ZF in CORE (biconditional revision)

define equal_sets(A, B): *X(X in A <-> X in B);
define is_subset(A, B): *X(X in A -> X in B);
define not_empty(A): ^X(X in A);
define is_empty(A): *X(~X in A);
define disjoint_sets(A, B): *X(X in A -> ~X in B);

axiom equality_consistency[P(1)]: *X*Y(equal_sets(X, Y) -> (P(X) <-> P(Y)));

prove equal_sets_reflexive: *A(equal_sets(A, A)){
	given |A|;
	prove equal_sets_def: *X(X in A <-> X in A){
		given |X|;
		prove lemma: X in A -> X in A{
			implies X_in_A;
			return X_in_A;
		}
		return iff(lemma, lemma);
	}
	return #equal_sets(A, A)(equal_sets_def);
}

prove equal_sets_symmetric: *A*B(equal_sets(A, B) -> equal_sets(B, A)){
	given |A, B|;
	implies equal_AB;
	prove def: *X(X in B <-> X in A){
		given |X|;
		return expand(equal_AB)(X);
	}
	return #equal_sets(B, A)(def);
}

prove equal_sets_transitive: *A*B*C(equal_sets(A, B) & equal_sets(B, C) -> equal_sets(A, C)){
	given |A, B, C|;
	implies equals_both;
	extract equals_both: equal_AB, equal_BC;
	return equality_consistency[<X: equal_sets(X, C)>](B, A)(equal_sets_symmetric(A, B)(equal_AB))(equal_BC);
}

prove axiom_extensionality: *A*B(equal_sets(A, B) -> *W(A in W <-> B in W)){
	given |A, B|;
	implies equal_AB;
	given |W|;
	return equality_consistency[<X: X in W>](A, B)(equal_AB);
}

axiom axiom_regularity: *A(not_empty(A) -> ^B(B in A & *C(~C in B | ~C in A)));

axiom axiom_specify[P(1)]: *A^B*X(X in B <-> X in A & P(X));

axiom axiom_pairing: *A*B^C(A in C & B in C);

axiom axiom_union: *F^A*Y*X((Y in F & X in Y) -> X in A);

axiom axiom_replacement[P(3)]: *A(*X(X in A -> ^Y(P(X, Y, A) & *Z(P(X, Z, A) -> equal_sets(Y, Z)))) -> ^B*Y((Y in B -> ^X(X in A & P(X, Y, A))) & (^X(X in A & P(X, Y, A)) -> Y in B)));

define is_pair(A, B, C): *X(X in C <-> equal_sets(X, A) | equal_sets(X, B));

prove definition_uniqueness_lemma[P(1)]: *A*B(*X(X in A <-> P(X)) & *X(X in B <-> P(X)) -> equal_sets(A, B)){
	given |A, B|;
	implies equality_condition;
	extract equality_condition: membership_A, membership_B;
	prove equal_def: *X(X in A <-> X in B){
		given |X|;
		prove lemma0: X in A -> X in B{
			implies X_in_A;
			return membership_B(X)(membership_A(X)(X_in_A));
		}
		prove lemma1: X in B -> X in A{
			implies X_in_B;
			return membership_A(X)(membership_B(X)(X_in_B));
		}
		return iff(lemma0, lemma1);
	}
	return #equal_sets(A, B)(equal_def);
}

prove pair: *A*B^C(is_pair(A, B, C)){
	given |A, B|;
	extract axiom_pairing(A, B)|D|: A_in_D, B_in_D;
	C_specified = axiom_specify[<X: equal_sets(X, A) | equal_sets(X, B)>](D)|C|;
	choose C;
	prove pair_def: *X(X in C <-> equal_sets(X, A) | equal_sets(X, B)){
		given |X|;
		prove lemma0: X in C -> equal_sets(X, A) | equal_sets(X, B){
			implies X_in_C;
			extract C_specified(X)(X_in_C): X_in_D, result;
			return result;
		}
		prove lemma1: equal_sets(X, A) | equal_sets(X, B) -> X in C{
			implies equals_or;
			X_in_D = branch(equals_or, equal_XA, equal_XB){
				return equality_consistency[<Z: Z in D>](X, A)(equal_XA)(A_in_D);
			} or {
				return equality_consistency[<Z: Z in D>](X, B)(equal_XB)(B_in_D);
			};
			return C_specified(X)(and(X_in_D, equals_or));
		}
		return iff(lemma0, lemma1);
	}
	return #is_pair(A, B, C)(pair_def);
}

prove pair_unique: *A*B*C*D(is_pair(A, B, C) & is_pair(A, B, D) -> equal_sets(C, D)){
	given |A, B, C, D|;
	implies pairs_premise;
	extract pairs_premise: pair_C, pair_D;
	return definition_uniqueness_lemma[<X: equal_sets(X, A) | equal_sets(X, B)>](C, D)(and(expand(pair_C), expand(pair_D)));
}

define is_union(A, B): *X(X in B <-> ^Y(Y in A & X in Y));

prove union: *A^B(is_union(A, B)){
	given |A|;
	implies_in_NEW = axiom_union(A)|NEW|;
	specified = axiom_specify[<X: ^Y(Y in A & X in Y)>](NEW)|B|;
	choose B;
	prove union_def: *X(X in B <-> ^Y(Y in A & X in Y)){
		given |X|;
		prove lemma0: X in B -> ^Y(Y in A & X in Y){
			implies X_in_B;
			extract specified(X)(X_in_B): X_in_NEW, result;
			return result;
		}
		prove lemma1: ^Y(Y in A & X in Y) -> X in B{
			implies exists_condition;
			condition_Y = exists_condition|Y|;
			X_in_NEW = implies_in_NEW(Y, X)(condition_Y);
			return specified(X)(and(X_in_NEW, exists_condition));
		}
		return iff(lemma0, lemma1);
	}
	return #is_union(A, B)(union_def);
}

prove union_unique: *A*B*C(is_union(A, B) & is_union(A, C) -> equal_sets(B, C)){
	given |A, B, C|;
	implies union_both;
	extract union_both: union_B, union_C;
	return definition_uniqueness_lemma[<X: ^Y(Y in A & X in Y)>](B, C)(and(expand(union_B), expand(union_C)));
}

define is_successor(A, B): ^C^D(is_pair(A, A, C) & is_pair(A, C, D) & is_union(D, B));

prove successor_exists: *A^B(is_successor(A, B)){
	given |A|;
	pair_AA = pair(A, A)|C|;
	pair_AC = pair(A, C)|D|;
	union_B = union(D)|B|;
	choose B;
	prove successor_def: ^C^D(is_pair(A, A, C) & is_pair(A, C, D) & is_union(D, B)){
		choose C, D;
		return and(pair_AA, pair_AC, union_B);
	}
	return #is_successor(A, B)(successor_def);
}

prove successor_unique: *A*B*C(is_successor(A, B) & is_successor(A, C) -> equal_sets(B, C)){
	given |A, B, C|;
	implies successor_both;
	extract successor_both: successor_B, successor_C;
	extract expand(successor_B)|PAIR0_B, PAIR1_B|: PAIR0_B_condition, PAIR1_B_condition, union_B;
	extract expand(successor_C)|PAIR0_C, PAIR1_C|: PAIR0_C_condition, PAIR1_C_condition, union_C;
	PAIR0_equal = pair_unique(A, A, PAIR0_B, PAIR0_C)(and(PAIR0_B_condition, PAIR0_C_condition));
	PAIR1_B_other = equality_consistency[<X: is_pair(A, X, PAIR1_B)>](PAIR0_B, PAIR0_C)(PAIR0_equal)(PAIR1_B_condition);
	PAIR1_equal = pair_unique(A, PAIR0_C, PAIR1_B, PAIR1_C)(and(PAIR1_B_other, PAIR1_C_condition));
	union_B_other = equality_consistency[<X: is_union(X, B)>](PAIR1_B, PAIR1_C)(PAIR1_equal)(union_B);
	return union_unique(PAIR1_C, B, C)(and(union_B_other, union_C));
}

define is_inductive_set(X): ^E(E in X & is_empty(E)) & *Y*Z(Y in X & is_successor(Y, Z) -> Z in X);

axiom axiom_infinity: ^X(is_inductive_set(X));

axiom axiom_power_set: *X^Y*Z(is_subset(Z, X) -> Z in Y);

//These are all of the ZF axioms


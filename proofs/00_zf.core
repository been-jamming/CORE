//A few logical axioms first
axiom axiom_absurdity[P]: false -> P;
axiom axiom_true: true;
axiom axiom_excluded_middle[P]: P | ~P;

relation =;
relation in;
axiom test_axiom: *A*B(A = B <-> *X(X in A <-> X in B));
print test_axiom;

//ZF in CORE (biconditional revision)

define equal_sets(A, B): *X(X in A <-> X in B);
define is_subset(A, B): *X(X in A -> X in B);
define not_empty(A): ^X(X in A);
define is_empty(A): *X(~X in A);
define disjoint_sets(A, B): *X(X in A -> ~X in B);

axiom equality_consistency[P(1)]: *X*Y(equal_sets(X, Y) -> (P(X) <-> P(Y)));

prove equal_sets_reflexive: *A(equal_sets(A, A)){
	given |A|;
	prove equal_sets_def: *X(X in A <-> X in A){
		given |X|;
		prove lemma: X in A -> X in A{
			implies X_in_A;
			return X_in_A;
		}
		return iff(lemma, lemma);
	}
	return #equal_sets(A, A)(equal_sets_def);
}

prove equal_sets_symmetric: *A*B(equal_sets(A, B) -> equal_sets(B, A)){
	given |A, B|;
	implies equal_AB;
	prove def: *X(X in B <-> X in A){
		given |X|;
		return expand(equal_AB)(X);
	}
	return #equal_sets(B, A)(def);
}

prove equal_sets_transitive: *A*B*C(equal_sets(A, B) & equal_sets(B, C) -> equal_sets(A, C)){
	given |A, B, C|;
	implies equals_both;
	equal_AB, equal_BC = equals_both;
	return equality_consistency[<X: equal_sets(X, C)>](B, A)(equal_sets_symmetric(A, B)(equal_AB))(equal_BC);
}

//We prove the "axiom" using equality consistency, which is just a more useful form of this axiom for my purposes
prove axiom_extensionality: *A*B(equal_sets(A, B) -> *W(A in W <-> B in W)){
	given |A, B|;
	implies equal_AB;
	given |W|;
	return equality_consistency[<X: X in W>](A, B)(equal_AB);
}

axiom axiom_regularity: *A(not_empty(A) -> ^B(B in A & *C(~C in B | ~C in A)));

axiom axiom_specify[P(1)]: *A^B*X(X in B <-> X in A & P(X));

axiom axiom_pairing: *A*B^C(A in C & B in C);

axiom axiom_union: *F^A*Y*X((Y in F & X in Y) -> X in A);

axiom axiom_replacement[P(3)]: *A(*X(X in A -> ^Y(P(X, Y, A) & *Z(P(X, Z, A) -> equal_sets(Y, Z)))) -> ^B*Y((Y in B -> ^X(X in A & P(X, Y, A))) & (^X(X in A & P(X, Y, A)) -> Y in B)));

define is_pair(A, B, C): *X(X in C <-> equal_sets(X, A) | equal_sets(X, B));

prove definition_uniqueness_lemma[P(1)]: *A*B(*X(X in A <-> P(X)) & *X(X in B <-> P(X)) -> equal_sets(A, B)){
	given |A, B|;
	implies equality_condition;
	membership_A, membership_B = equality_condition;
	prove equal_def: *X(X in A <-> X in B){
		given |X|;
		prove lemma0: X in A -> X in B{
			implies X_in_A;
			return membership_B(X)(membership_A(X)(X_in_A));
		}
		prove lemma1: X in B -> X in A{
			implies X_in_B;
			return membership_A(X)(membership_B(X)(X_in_B));
		}
		return iff(lemma0, lemma1);
	}
	return #equal_sets(A, B)(equal_def);
}

prove pair: *A*B^C(is_pair(A, B, C)){
	given |A, B|;
	A_in_D, B_in_D = axiom_pairing(A, B)|D|;
	C_specified = axiom_specify[<X: equal_sets(X, A) | equal_sets(X, B)>](D)|C|;
	choose C;
	prove pair_def: *X(X in C <-> equal_sets(X, A) | equal_sets(X, B)){
		given |X|;
		prove lemma0: X in C -> equal_sets(X, A) | equal_sets(X, B){
			implies X_in_C;
			X_in_D, result = C_specified(X)(X_in_C);
			return result;
		}
		prove lemma1: equal_sets(X, A) | equal_sets(X, B) -> X in C{
			implies equals_or;
			X_in_D = branch(equals_or, equal_XA, equal_XB){
				return equality_consistency[<Z: Z in D>](X, A)(equal_XA)(A_in_D);
			} or {
				return equality_consistency[<Z: Z in D>](X, B)(equal_XB)(B_in_D);
			};
			return C_specified(X)(X_in_D, equals_or);
		}
		return iff(lemma0, lemma1);
	}
	return #is_pair(A, B, C)(pair_def);
}

prove pair_unique: *A*B*C*D(is_pair(A, B, C) & is_pair(A, B, D) -> equal_sets(C, D)){
	given |A, B, C, D|;
	implies pairs_premise;
	pair_C, pair_D = pairs_premise;
	return definition_uniqueness_lemma[<X: equal_sets(X, A) | equal_sets(X, B)>](C, D)(expand(pair_C), expand(pair_D));
}

define is_union(A, B): *X(X in B <-> ^Y(Y in A & X in Y));

prove union: *A^B(is_union(A, B)){
	given |A|;
	implies_in_NEW = axiom_union(A)|NEW|;
	specified = axiom_specify[<X: ^Y(Y in A & X in Y)>](NEW)|B|;
	choose B;
	prove union_def: *X(X in B <-> ^Y(Y in A & X in Y)){
		given |X|;
		prove lemma0: X in B -> ^Y(Y in A & X in Y){
			implies X_in_B;
			X_in_NEW, result = specified(X)(X_in_B);
			return result;
		}
		prove lemma1: ^Y(Y in A & X in Y) -> X in B{
			implies exists_condition;
			condition_Y = exists_condition|Y|;
			X_in_NEW = implies_in_NEW(Y, X)(condition_Y);
			return specified(X)(X_in_NEW, exists_condition);
		}
		return iff(lemma0, lemma1);
	}
	return #is_union(A, B)(union_def);
}

prove union_unique: *A*B*C(is_union(A, B) & is_union(A, C) -> equal_sets(B, C)){
	given |A, B, C|;
	implies union_both;
	union_B, union_C = union_both;
	return definition_uniqueness_lemma[<X: ^Y(Y in A & X in Y)>](B, C)(expand(union_B), expand(union_C));
}

define is_successor(A, B): *X(X in B <-> X in A | equal_sets(X, A));

prove successor: *A^B(is_successor(A, B)){
	given |A|;
	pair_AA = pair(A, A)|C|;
	pair_AC = pair(A, C)|D|;
	union_B = union(D)|B|;
	choose B;
	prove successor_def: *X(X in B <-> X in A | equal_sets(X, A)){
		given |X|;
		prove lemma0: X in B -> X in A | equal_sets(X, A){
			implies X_in_B;
			Y_in_D, X_in_Y = expand(union_B)(X)(X_in_B)|Y|;
			equal_A_or_C = expand(pair_AC)(Y)(Y_in_D);
			return branch(equal_A_or_C, equal_A, equal_C){
				X_in_A = equality_consistency[<S: X in S>](Y, A)(equal_A)(X_in_Y);
				return or(X_in_A, <:equal_sets(X, A)>);
			} or {
				X_in_C = equality_consistency[<S: X in S>](Y, C)(equal_C)(X_in_Y);
				equal_A_or = expand(pair_AA)(X)(X_in_C);
				equal_A = branch(equal_A_or, equal_A, equal_A){return equal_A;} or {return equal_A;};
				return or(<:X in A>, equal_A);
			};
		}
		prove lemma1: X in A | equal_sets(X, A) -> X in B{
			implies premise;
			return branch(premise, X_in_A, equal_XA){
				prove union_def: ^Y(Y in D & X in Y){
					choose A;
					return expand(pair_AC)(A)(or(equal_sets_reflexive(A), <:equal_sets(A, C)>)), X_in_A;
				}
				return expand(union_B)(X)(union_def);
			} or {
				X_in_C = expand(pair_AA)(X)(or(equal_XA, equal_XA));
				prove union_def: ^Y(Y in D & X in Y){
					choose C;
					return expand(pair_AC)(C)(or(<:equal_sets(C, A)>, equal_sets_reflexive(C))), X_in_C;
				}
				return expand(union_B)(X)(union_def);
			};
		}
		return iff(lemma0, lemma1);
	}
	return #is_successor(A, B)(successor_def);
}

prove successor_unique: *A*B*C(is_successor(A, B) & is_successor(A, C) -> equal_sets(B, C)){
	given |A, B, C|;
	implies successor_both;
	successor_B, successor_C = successor_both;
	return definition_uniqueness_lemma[<X: X in A | equal_sets(X, A)>](B, C)(expand(successor_B), expand(successor_C));
}

//One of the rare moments when we use the axiom of regularity
prove no_pair_recursive_membership: *A*B(~A in B | ~B in A){
	given |A, B|;
	PAIR_AB_def = expand(pair(A, B)|PAIR_AB|);
	prove PAIR_AB_not_empty: ^A(A in PAIR_AB){
		choose A;
		return PAIR_AB_def(A)(or(equal_sets_reflexive(A), <:equal_sets(A, B)>));
	}
	PAIR_AB_not_empty = #not_empty(PAIR_AB)(PAIR_AB_not_empty);
	D_in_PAIR_AB, disjoint = axiom_regularity(PAIR_AB)(PAIR_AB_not_empty)|D|;
	return branch(PAIR_AB_def(D)(D_in_PAIR_AB), equal_D_A, equal_D_B){
		return branch(disjoint(B), not_B_in_D, not_B_in_PAIR_AB){
			not_B_in_A = equality_consistency[<Q: ~B in Q>](D, A)(equal_D_A)(not_B_in_D);
			return or(<:~A in B>, not_B_in_A);
		} or {
			B_in_PAIR_AB = PAIR_AB_def(B)(or(<:equal_sets(B, A)>, equal_sets_reflexive(B)));
			absurdity = not_B_in_PAIR_AB(B_in_PAIR_AB);
			return axiom_absurdity[goal](absurdity);
		};
	} or {
		return branch(disjoint(A), not_A_in_D, not_A_in_PAIR_AB){
			not_A_in_B = equality_consistency[<Q: ~A in Q>](D, B)(equal_D_B)(not_A_in_D);
			return or(not_A_in_B, <:~B in A>);
		} or {
			A_in_PAIR_AB = PAIR_AB_def(A)(or(equal_sets_reflexive(A), <:equal_sets(A, B)>));
			absurdity = not_A_in_PAIR_AB(A_in_PAIR_AB);
			return axiom_absurdity[goal](absurdity);
		};
	};
}

define is_inductive_set(X): ^E(E in X & is_empty(E)) & *Y*Z(Y in X & is_successor(Y, Z) -> Z in X);

axiom axiom_infinity: ^X(is_inductive_set(X));

axiom axiom_power_set: *X^Y*Z(is_subset(Z, X) -> Z in Y);

//These are all of the ZF axioms

//Finally, I want to show that the inverse of the axiom of extensionality can also be proven
prove axiom_extensionality_inverse: *A*B(*W(A in W <-> B in W) -> equal_sets(A, B)){
	given |A, B|;
	implies premise;
	pair_U = expand(pair(B, B)|U|);
	B_in_U = pair_U(B)(or(equal_sets_reflexive(B), equal_sets_reflexive(B)));
	A_in_U = premise(U)(B_in_U);
	return branch(pair_U(A)(A_in_U), equal_A_B, equal_A_B){
		return equal_A_B;
	} or {
		return equal_A_B;
	};
}


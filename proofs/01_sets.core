prove pair_swap: *A*B*C(is_pair(A, B, C) -> is_pair(B, A, C)){
	given |A, B, C|;
	implies pair_C;
	pair_C = expand(pair_C);
	prove pair_def: *X(X in C <-> equal_sets(X, B) | equal_sets(X, A)){
		given |X|;
		prove lemma0: X in C -> equal_sets(X, B) | equal_sets(X, A){
			implies X_in_C;
			return swap(pair_C(X)(X_in_C));
		}
		prove lemma1: equal_sets(X, B) | equal_sets(X, A) -> X in C{
			implies both;
			return pair_C(X)(swap(both));
		}
		return iff(lemma0, lemma1);
	}
	return #is_pair(B, A, C)(pair_def);
}

prove pair_equal_condition: *A*B*C*D*E*F(is_pair(A, B, E) & is_pair(C, D, F) & equal_sets(E, F) -> equal_sets(A, C) | equal_sets(A, D)){
	given |A, B, C, D, E, F|;
	implies premises;
	extract premises: pair_E, pair_F, equal_EF;
	pair_E = expand(pair_E);
	pair_F = expand(pair_F);
	A_in_E = pair_E(A)(or(equal_sets_reflexive(A), <:equal_sets(A, B)>));
	pair_E = equality_consistency[<X: *Y(Y in X <-> equal_sets(Y, C) | equal_sets(Y, D))>](E, F)(equal_EF)(pair_F);
	return pair_E(A)(A_in_E);
}

define is_tuple(A, B, C): ^E^F(is_pair(A, A, E) & is_pair(A, B, F) & is_pair(E, F, C));

prove tuple: *A*B^C(is_tuple(A, B, C)){
	given |A, B|;
	E_pair = pair(A, A)|E|;
	F_pair = pair(A, B)|F|;
	C_pair = pair(E, F)|C|;
	choose C;
	prove tuple_def: ^E^F(is_pair(A, A, E) & is_pair(A, B, F) & is_pair(E, F, C)){
		choose E, F;
		return and(E_pair, F_pair, C_pair);
	}
	return #is_tuple(A, B, C)(tuple_def);
}

prove tuple_unique: *A*B*C*D(is_tuple(A, B, C) & is_tuple(A, B, D) -> equal_sets(C, D)){
	given |A, B, C, D|;
	implies both_tuples;
	extract both_tuples: tuple_C, tuple_D;
	tuple_C_def = expand(tuple_C);
	tuple_D_def = expand(tuple_D);
	extract tuple_C_def|E_C, F_C|: pair_E_C, pair_F_C, pair_C;
	extract tuple_D_def|E_D, F_D|: pair_E_D, pair_F_D, pair_D;
	E_C_equal_E_D = pair_unique(A, A, E_C, E_D)(and(pair_E_C, pair_E_D));
	F_C_equal_F_D = pair_unique(A, B, F_C, F_D)(and(pair_F_C, pair_F_D));
	pair_C_next = equality_consistency[<X: is_pair(X, F_C, C)>](E_C, E_D)(E_C_equal_E_D)(pair_C);
	pair_C_final = equality_consistency[<X: is_pair(E_D, X, C)>](F_C, F_D)(F_C_equal_F_D)(pair_C_next);
	return pair_unique(E_D, F_D, C, D)(and(pair_C_final, pair_D));
}

prove tuple_equal_condition: *A*B*C*D*E*F(is_tuple(A, B, E) & is_tuple(C, D, F) & equal_sets(E, F) -> equal_sets(A, C) & equal_sets(B, D)){
	given |A, B, C, D, E, F|;
	implies premises;
	extract premises: tuple_E, tuple_F, equal_EF;
	equal_FE = equal_sets_symmetric(E, F)(equal_EF);
	tuple_E = expand(tuple_E);
	tuple_F = expand(tuple_F);
	extract tuple_E|PAIR_AA, PAIR_AB|: pair_AA, pair_AB, pair_E;
	extract tuple_F|PAIR_CC, PAIR_CD|: pair_CC, pair_CD, pair_F;
	other_pair_E = pair_swap(PAIR_AA, PAIR_AB, E)(pair_E);
	other_pair_F = pair_swap(PAIR_CC, PAIR_CD, F)(pair_F);
	other_pair_AB = pair_swap(A, B, PAIR_AB)(pair_AB);
	other_pair_CD = pair_swap(C, D, PAIR_CD)(pair_CD);

	AA_CC_or_AA_CD = pair_equal_condition(PAIR_AA, PAIR_AB, PAIR_CC, PAIR_CD, E, F)(and(pair_E, pair_F, equal_EF));
	AC_or_AD = branch(AA_CC_or_AA_CD, AA_CC, AA_CD){
		AC_or_AC = pair_equal_condition(A, A, C, C, PAIR_AA, PAIR_CC)(and(pair_AA, pair_CC, AA_CC));
		return branch(AC_or_AC, AC, AC){return or(AC, <:equal_sets(A, D)>);} or {return or(AC, <:equal_sets(A, D)>);};
	} or {
		return pair_equal_condition(A, A, C, D, PAIR_AA, PAIR_CD)(and(pair_AA, pair_CD, AA_CD));
	};

	AB_CC_or_AB_CD = pair_equal_condition(PAIR_AB, PAIR_AA, PAIR_CC, PAIR_CD, E, F)(and(other_pair_E, pair_F, equal_EF));
	BC_or_BD = branch(AB_CC_or_AB_CD, AB_CC, AB_CD){
		BC_or_BC = pair_equal_condition(B, A, C, C, PAIR_AB, PAIR_CC)(and(other_pair_AB, pair_CC, AB_CC));
		return branch(BC_or_BC, BC, BC){return or(BC, <:equal_sets(B, D)>);} or {return or(BC, <:equal_sets(B, D)>);};
	} or {
		return pair_equal_condition(B, A, C, D, PAIR_AB, PAIR_CD)(and(other_pair_AB, pair_CD, AB_CD));
	};

	CC_AA_or_CC_AB = pair_equal_condition(PAIR_CC, PAIR_CD, PAIR_AA, PAIR_AB, F, E)(and(pair_F, pair_E, equal_FE));
	CA_or_CB = branch(CC_AA_or_CC_AB, CC_AA, CC_AB){
		CA_or_CA = pair_equal_condition(C, C, A, A, PAIR_CC, PAIR_AA)(and(pair_CC, pair_AA, CC_AA));
		return branch(CA_or_CA, CA, CA){return or(CA, <:equal_sets(C, B)>);} or {return or(CA, <:equal_sets(C, B)>);};
	} or {
		return pair_equal_condition(C, C, A, B, PAIR_CC, PAIR_AB)(and(pair_CC, pair_AB, CC_AB));
	};

	CD_AA_or_CD_AB = pair_equal_condition(PAIR_CD, PAIR_CC, PAIR_AA, PAIR_AB, F, E)(and(other_pair_F, pair_E, equal_FE));
	DA_or_DB = branch(CD_AA_or_CD_AB, CD_AA, CD_AB){
		DA_or_DA = pair_equal_condition(D, C, A, A, PAIR_CD, PAIR_AA)(and(other_pair_CD, pair_AA, CD_AA));
		return branch(DA_or_DA, DA, DA){return or(DA, <:equal_sets(D, B)>);} or {return or(DA, <:equal_sets(D, B)>);};
	} or {
		return pair_equal_condition(D, C, A, B, PAIR_CD, PAIR_AB)(and(other_pair_CD, pair_AB, CD_AB));
	};

	//Now the proof splits into 4 cases
	return branch(AC_or_AD, AC, AD){
		return branch(BC_or_BD, BC, BD){
			//Case 1
			AB = equal_sets_transitive(A, C, B)(and(AC, equal_sets_symmetric(B, C)(BC)));
			BD = branch(DA_or_DB, DA, DB){
				DB = equality_consistency[<X: equal_sets(D, X)>](A, B)(AB)(DA);
				return equal_sets_symmetric(D, B)(DB);
			} or {
				return equal_sets_symmetric(D, B)(DB);
			};
			return and(AC, BD);
		} or {
			//Case 2
			//(This case is trivial)
			return and(AC, BD);
		};
	} or {
		return branch(BC_or_BD, BC, BD){
			//Case 3
			//(This case is the most important)
			pair_DD = equality_consistency[<X: is_pair(X, X, PAIR_AA)>](A, D)(AD)(pair_AA);
			DC = branch(AA_CC_or_AA_CD, AA_CC, AA_CD){
				DC_or_DC = pair_equal_condition(D, D, C, C, PAIR_AA, PAIR_CC)(and(pair_DD, pair_CC, AA_CC));
				return branch(DC_or_DC, DC, DC){return DC;} or {return DC;};
			} or {
				CD_or_CD = pair_equal_condition(C, D, D, D, PAIR_CD, PAIR_AA)(and(pair_CD, pair_DD, equal_sets_symmetric(PAIR_AA, PAIR_CD)(AA_CD)));
				return branch(CD_or_CD, CD, CD){return equal_sets_symmetric(C, D)(CD);} or {return equal_sets_symmetric(C, D)(CD);};
			};
			AC = equal_sets_transitive(A, D, C)(and(AD, DC));
			BD = equal_sets_transitive(B, C, D)(and(BC, equal_sets_symmetric(D, C)(DC)));
			return and(AC, BD);
		} or {
			//Case 4
			//The final case
			BA = equal_sets_transitive(B, D, A)(and(BD, equal_sets_symmetric(A, D)(AD)));
			AC = branch(CA_or_CB, CA, CB){
				return equal_sets_symmetric(C, A)(CA);
			} or {
				CA = equal_sets_transitive(C, B, A)(and(CB, BA));
				return equal_sets_symmetric(C, A)(CA);
			};
			return and(AC, BD);
		};
	};
}

prove subset_transitive: *A*B*C(is_subset(A, B) & is_subset(B, C) -> is_subset(A, C)){
	given |A, B, C|;
	implies subset_both;
	extract subset_both: subset_B, subset_C;
	subset_B = expand(subset_B);
	subset_C = expand(subset_C);
	prove subset_def: *X(X in A -> X in C){
		given |X|;
		implies X_in_A;
		return subset_C(X)(subset_B(X)(X_in_A));
	}
	return #is_subset(A, C)(subset_def);
}

prove pair_subset: *A*X(^Y^Z(Y in A & Z in A & is_pair(Y, Z, X)) -> is_subset(X, A)){
	given |A, X|;
	implies YZ_exist;
	extract YZ_exist|Y, Z|: Y_in_A, Z_in_A, pair_X;
	pair_X = expand(pair_X);
	prove subset_def: *W(W in X -> W in A){
		given |W|;
		implies W_in_X;
		return branch(pair_X(W)(W_in_X), equal_WY, equal_WZ){
			return equality_consistency[<X: X in A>](Y, W)(equal_sets_symmetric(W, Y)(equal_WY))(Y_in_A);
		} or {
			return equality_consistency[<X: X in A>](Z, W)(equal_sets_symmetric(W, Z)(equal_WZ))(Z_in_A);
		};
	}
	return #is_subset(X, A)(subset_def);
}

define is_pairs(A, B, P): *X(X in P <-> ^Y^Z(Y in A & Z in B & is_pair(Y, Z, X)));

prove pairs: *A*B^C(is_pairs(A, B, C)){
	given |A, B|;
	Q_contains_both = axiom_pairing(A, B)|Q|;
	extract Q_contains_both: Q_contains_A, Q_contains_B;
	U_union = axiom_union(Q)|U|;
	P_power_set = axiom_power_set(U)|P|;
	C_def = axiom_specify[<X: ^Y^Z(Y in A & Z in B & is_pair(Y, Z, X))>](P)|C|;
	choose C;
	prove pairs_def: *X(X in C <-> ^Y^Z(Y in A & Z in B & is_pair(Y, Z, X))){
		given |X|;
		prove lemma0: X in C -> ^Y^Z(Y in A & Z in B & is_pair(Y, Z, X)){
			implies X_in_C;
			extract C_def(X)(X_in_C): X_in_P, result;
			return result;
		}
		prove lemma1: ^Y^Z(Y in A & Z in B & is_pair(Y, Z, X)) -> X in C{
			implies premise;
			extract premise|Y, Z|: Y_in_A, Z_in_B, pair_X;
			Y_in_U = U_union(A, Y)(and(Q_contains_A, Y_in_A));
			Z_in_U = U_union(B, Z)(and(Q_contains_B, Z_in_B));
			prove lemma: ^Y^Z(Y in U & Z in U & is_pair(Y, Z, X)){
				choose Y, Z;
				return and(Y_in_U, Z_in_U, pair_X);
			}
			X_subset_U = pair_subset(U, X)(lemma);
			X_in_P = P_power_set(X)(X_subset_U);
			return C_def(X)(and(X_in_P, premise));
		}
		return iff(lemma0, lemma1);
	}
	return #is_pairs(A, B, C)(pairs_def);
}

define is_cross_product(A, B, C): *X(X in C <-> ^D^E(D in A & E in B & is_tuple(D, E, X)));

prove cross_product: *A*B^C(is_cross_product(A, B, C)){
	given |A, B|;
	pairs_AA = pairs(A, A)|PAIRS_AA|;
	pairs_AA = expand(pairs_AA);
	pairs_AB = pairs(A, B)|PAIRS_AB|;
	pairs_AB = expand(pairs_AB);
	CBIG_def = pairs(PAIRS_AA, PAIRS_AB)|CBIG|;
	CBIG_def = expand(CBIG_def);
	C_def = axiom_specify[<X: ^Y^Z(Y in A & Z in B & is_tuple(Y, Z, X))>](CBIG)|C|;
	choose C;
	prove cross_product_def: *X(X in C <-> ^D^E(D in A & E in B & is_tuple(D, E, X))){
		given |X|;
		prove lemma0: X in C -> ^D^E(D in A & E in B & is_tuple(D, E, X)){
			implies X_in_C;
			extract C_def(X)(X_in_C): X_in_CBIG, result;
			return result;
		}
		prove lemma1: ^D^E(D in A & E in B & is_tuple(D, E, X)) -> X in C{
			implies DE_exist;
			extract DE_exist|D, E|: D_in_A, E_in_B, tuple_X;
			tuple_X = expand(tuple_X);
			extract tuple_X|PAIR_DD, PAIR_DE|: pair_DD, pair_DE, pair_X;
			prove lemma: ^J^K(J in A & K in A & is_pair(J, K, PAIR_DD)){
				choose D, D;
				return and(D_in_A, D_in_A, pair_DD);
			}
			PAIR_DD_in_PAIRS_AA = pairs_AA(PAIR_DD)(lemma);
			prove lemma: ^J^K(J in A & K in B & is_pair(J, K, PAIR_DE)){
				choose D, E;
				return and(D_in_A, E_in_B, pair_DE);
			}
			PAIR_DE_in_PAIRS_AB = pairs_AB(PAIR_DE)(lemma);
			prove lemma: ^J^K(J in PAIRS_AA & K in PAIRS_AB & is_pair(J, K, X)){
				choose PAIR_DD, PAIR_DE;
				return and(PAIR_DD_in_PAIRS_AA, PAIR_DE_in_PAIRS_AB, pair_X);
			}
			X_in_CBIG = CBIG_def(X)(lemma);
			return C_def(X)(and(X_in_CBIG, DE_exist));
		}
		return iff(lemma0, lemma1);
	}
	return #is_cross_product(A, B, C)(cross_product_def);
}

define is_intersection(A, B): *X(X in B <-> *Y(Y in A -> X in Y));

//The intersection only exists when the set isn't empty!
prove intersection: *A(not_empty(A) -> ^B(is_intersection(A, B))){
	given |A|;
	implies contains;
	S_in_A = expand(contains)|S|;
	U_union = expand(union(A)|U|);
	B_def = axiom_specify[<X: *Y(Y in A -> X in Y)>](U)|B|;
	choose B;
	prove intersection_def: *X(X in B <-> *Y(Y in A -> X in Y)){
		given |X|;
		prove lemma0: X in B -> *Y(Y in A -> X in Y){
			implies X_in_B;
			extract B_def(X)(X_in_B): X_in_U, result;
			return result;
		}
		prove lemma1: *Y(Y in A -> X in Y) -> X in B{
			implies intersect_condition;
			X_in_S = intersect_condition(S)(S_in_A);
			prove lemma: ^S(S in A & X in S){
				choose S;
				return and(S_in_A, X_in_S);
			}
			X_in_U = U_union(X)(lemma);
			return B_def(X)(and(X_in_U, intersect_condition));
		}
		return iff(lemma0, lemma1);
	}
	return #is_intersection(A, B)(intersection_def);
}

prove intersection_unique: *A*B*C(is_intersection(A, B) & is_intersection(A, C) -> equal_sets(B, C)){
	given |A, B, C|;
	implies intersection_both;
	extract intersection_both: intersection_B, intersection_C;
	return definition_uniqueness_lemma[<X: *Y(Y in A -> X in Y)>](B, C)(and(expand(intersection_B), expand(intersection_C)));
}

